{"version":3,"sources":["components/Form/util.ts","components/Form/Designer/util.tsx","components/Form/constants/WidgetGroups.tsx","components/Form/hooks/interactions.ts","components/Form/index.tsx","components/Form/Designer/Cell/GridCell/Pool/Lane.tsx","components/Form/Designer/Cell/GridCell/Pool/DndLane.tsx","components/Form/Designer/FormGroup/index.tsx","components/Form/Designer/Cell/GridCell/Pool/index.tsx","components/Form/Designer/Cell/GridCell/index.tsx","components/Form/Designer/Cell/TabCell/index.tsx","components/Form/TextAreaCell.tsx","components/Form/InputCell/index.tsx","components/Form/SwitchCell/index.tsx","components/Form/LabelCell/LabelCell.tsx","components/Form/DateCell/index.tsx","components/Form/SelectCell/index.tsx","components/Form/CheckboxCell/index.tsx","components/Form/Designer/Cell/index.tsx","components/Form/Designer/DnDCell.tsx","components/hook/index.ts","components/Form/Designer/Cell/GridCellConfig/LaneConfig.tsx","components/Form/Designer/constant.ts","components/Form/Designer/Cell/GridCellConfig/index.tsx","components/Form/Designer/Widget.tsx","components/Form/Designer/WidgetGroup.tsx","components/Form/hooks/index.ts","components/Form/CellTextPropConfig.tsx","components/Form/CellLabelConfig.tsx","components/Form/LabelCell/LabelCellConfig.tsx","components/Form/Layout.tsx","components/Form/CellBooleanPropConfig.tsx","components/Form/CellRequiredConfig.tsx","components/Form/CellReadonlyConfig.tsx","components/Form/CellDefaultConfig.tsx","components/Form/CellIdConfig.tsx","components/Form/CellOnChangeConfig.tsx","components/Form/Designer/DefaultCellConfig.tsx","components/Form/Designer/Cell/TabCell/TabCellConfig/TabConfig.tsx","components/Form/Designer/Cell/TabCell/TabCellConfig/index.tsx","components/Form/SelectCell/SelectCellConfig/OptionConfig.tsx","components/Form/CellOptionsConfig.tsx","components/Form/CheckboxCell/CheckboxCellConfig.tsx","components/Form/SelectCell/SelectCellConfig/index.tsx","components/Form/DateCell/DateCellConfig.tsx","components/Form/Designer/style.ts","components/Form/CellCustomFormatConfig.tsx","components/Form/CellEnumPropConfig.tsx","components/Form/CellFormatConfig.tsx","components/Form/CellUniqueConfig.tsx","components/Form/InputCell/InputCellConfig.tsx","components/Form/Designer/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["InteractContext","React","createContext","set","root","id","key","value","strings","split","id1","func","data","lanes","lane","cellDataList","element","type","index","parseInt","id2","row","item","validateFormat","cellData","format","pattern","customFormat","match","validateRequired","required","clone","src","copy","JSON","parse","stringify","forEach","dest","onChange","onClick","cloneAndForEach","handler","recursion","i","length","locate","matchFunc","location","parentId","laneIndex","indexOf","getCellDataList","list","drop","cell","dropItemId","position","dropLocation","dropList","splice","active","reducer","state","action","dragLocation","dragList","dragCell","dragItem","push","rootCellData","undefined","cellLocation","deleteActive","targetId","options","warnable","warning","label","message","error","createWidgetInstance","customCells","find","customCell","Date","getTime","span","tabs","createBasicWidgetInstance","WidgetGroups","name","widgets","icon","useInteractions","dispatch","setValue","useCallback","setOption","getValue","filter","fetchValue","InstanceContext","Form","forwardRef","ref","useReducer","innerData","useImperativeHandle","getData","result","childLane","isEmpty","detail","listElement","hiddenValues","getValues","validate","constraintViolations","description","interactions","useUpdateEffect","Provider","Cell","className","Lane","direction","instanceDispatch","useContext","useState","mouseOver","setMouseOver","useTimeoutFn","cancel","reset","cells","useMemo","map","child","props","layout","style","width","onMouseOver","onMouseOut","size","DndLane","DesignerContext","useDrop","accept","monitor","isOver","getClientOffset","instance","collect","shallow","getItem","FormGroup","join","InstanceListHeaderItem","styled","Col","Pool","isDesigner","getLane","color","update","$push","$apply","x","y","GridCell","Tab","ActiveTab","Tabs","TabCell","designerDispatch","findIndex","tabIndex","setTabIndex","handleSwitch","TextArea","Input","TextAreaCell","rows","placeholder","disabled","event","target","labeled","title","InputCell","handleChange","SwitchCell","checked","LabelCell","height","padding","lineHeight","elementStyle","DateCell","date","moment","Option","Select","SelectCell","option","CheckboxCell","Group","checkedValues","children","valueObject","command","unstagedValues","unstagedId","Object","prototype","hasOwnProperty","call","unstagedValue","unstagedIds","values","some","createElement","DnDCell","useRef","dropClassName","setDropClassName","hover","current","hoverBoundingRect","getBoundingClientRect","coord","hoverMiddleY","bottom","top","hoverClientY","hoverMiddleX","right","left","hoverClientX","clientOffset","useDrag","isDragging","begin","drag","stopPropagation","opacity","zIndex","useVerticalDragDropMemberRef","move","dragIndex","hoverIndex","LaneConfig","onRemove","onResize","cursor","margin","labelCol","GridCellConfig","Item","finalSpan","$set","$splice","from","to","StyledLi","li","Widget","widget","listStyle","w","useCellDataProp","prop","CellTextPropConfig","internalValue","setInternalValue","handleBlur","onBlur","CellLabelConfig","LabelCellConfig","Header","Layout","Sider","Content","WhiteLayout","WhiteHeader","WhiteSider","WhiteContent","CellBooleanPropConfig","CellRequiredConfig","CellReadonlyConfig","CellDefaultConfig","CellIdConfig","CellOnChangeConfig","DefaultCellConfig","TabConfig","onRename","TabCellConfig","tab","OptionConfig","CellOptionsConfig","useVerticalDragDropMemberEvent","CheckboxCellConfig","SelectCellConfig","Text","Typography","DateCellConfig","defaultValueOptions","text","currentDefaultValueOptions","setCurrentDefaultValueOptions","onSearch","searchText","search","RegExp","contentStyle","borderRight","layoutStyle","rightSiderStyle","overflowY","CellCustomFormatConfig","CellFormatConfig","CellEnumPropConfig","CellUniqueConfig","InputCellConfig","LeftSider","attrs","FullHeightBorderedLayout","ToolBar","Designer","availableCustomCells","toolbar","defaultCellData","builtinCellDataTypes","previewDialogVisible","setPreviewDialogVisible","previewData","setPreviewData","previewRef","delFunction","keyCode","ctrlKey","finalAvailableCells","useEffect","document","addEventListener","removeEventListener","preview","load","get","getActive","widgetGroups","group","DndProvider","backend","HTML5Backend","g","WidgetGroup","alert","config","visible","onCancel","footer","defaultValue","App","Boolean","window","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f7e78cd8.chunk.js","sourcesContent":["import { CellData, CellDataType, LanedCellData } from \"./schema\";\nimport { forEach } from \"./Designer/util\";\nimport React from \"react\";\nimport { InputCellData } from \"./InputCell/schema\";\n\nexport const InteractContext = React.createContext<any>(null);\n\nexport function getValues(cell: CellData): any {\n  let result: any = {};\n  const func = function (data: CellData) {\n    if (data.lanes) {\n      (data as LanedCellData).lanes.forEach((lane) => {\n        lane.cellDataList.forEach((element) => {\n          switch (element.type) {\n            case \"grid\":\n              func(element);\n              break;\n            case \"list\":\n              result[element.id] = [];\n              (element as LanedCellData).lanes.forEach((childLane) => {\n                let isEmpty = true;\n                let detail: { [key: string]: any } = {};\n                childLane.cellDataList.forEach((listElement: CellData) => {\n                  if (listElement.value) {\n                    isEmpty = false;\n                    detail[listElement.id] = listElement.value;\n                  }\n                });\n                if (!isEmpty) {\n                  detail = { ...detail, ...childLane.hiddenValues };\n                  result[element.id].push(detail);\n                }\n              });\n              break;\n            default:\n              result[element.id] = element.value;\n              break;\n          }\n        });\n        result = { ...result, ...lane.hiddenValues };\n      });\n    }\n  };\n  func(cell);\n  return result;\n}\n\n/**\n * Get value from cell data by id\n * @param root: root cell data\n * @param id: e.g., name, details.0.name, details.name\n */\nexport function getValue(root: CellData, id: string): any | any[] {\n  let value: any = null;\n  const strings = id.split(\".\");\n  const id1 = strings[0];\n  const func = function (data: CellData) {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const element of lane.cellDataList) {\n          switch (element.type) {\n            case \"grid\":\n            case \"tab\":\n              func(element);\n              break;\n            default:\n              if (element.id === id1) {\n                if (element.type === \"list\") {\n                  if (strings.length === 3) {\n                    const index = parseInt(strings[1]);\n                    const id2 = strings[2];\n                    const row = (element as LanedCellData).lanes[index];\n                    for (const item of row.cellDataList) {\n                      if (item.id === id2) {\n                        value = item.value;\n                        return true;\n                      }\n                    }\n                  } else {\n                    value = [];\n                    const id2 = strings[1];\n                    for (const row of (element as LanedCellData).lanes) {\n                      for (const item of row.cellDataList.filter(\n                        (item) => item.id === id2\n                      )) {\n                        value.push(item.value);\n                      }\n                    }\n                    return true;\n                  }\n                } else {\n                  value = element.value;\n                  return true;\n                }\n              }\n              break;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  func(root);\n  return value;\n}\n\nexport function set(root: CellData, id: string, key: string, value: any): void {\n  const strings = id.split(\".\");\n  const id1 = strings[0];\n  const func = function (data: CellData) {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const element of lane.cellDataList) {\n          switch (element.type) {\n            case \"grid\":\n            case \"tab\":\n              func(element);\n              break;\n            default:\n              if (element.id === id1) {\n                if (element.type === \"list\") {\n                  const index = parseInt(strings[1]);\n                  const id2 = strings[2];\n                  const row = element.lanes![index];\n                  for (const item of row.cellDataList) {\n                    if (item.id === id2) {\n                      item[key] = value;\n                      return true;\n                    }\n                  }\n                } else {\n                  element[key] = value;\n                  return true;\n                }\n              }\n              break;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  func(root);\n}\n\nfunction formatValue(value: any, type: CellDataType | string): any {\n  if (type === \"datetime\") {\n    return value.substr(0, 19).replace(\"T\", \" \");\n  } else {\n    return value;\n  }\n}\n\nexport function setData(root: CellData, form: any): void {\n  const master: any = { ...form };\n  (root as LanedCellData).lanes[0].hiddenValues = master;\n  for (const cellData of (root as LanedCellData).lanes[0].cellDataList) {\n    delete master[cellData.id];\n    forEach(cellData, (item) => {\n      const value = form[cellData.id];\n      if (item.type !== \"list\" && item.type !== \"grid\" && item.type !== \"tab\") {\n        cellData.value = value ? formatValue(value, cellData.type) : null;\n      } else if (item.type === \"list\" && value) {\n        for (const row of value) {\n          const detail: any = { ...row };\n          (item as LanedCellData).lanes.push({\n            ...item.lanes[0],\n            cellDataList: (item as LanedCellData).lanes[0].cellDataList.map(\n              (x) => {\n                delete detail[x.id];\n                const y: CellData = {\n                  ...x,\n                };\n                const value = row[x.id];\n                y.value = value ? formatValue(value, y.type) : null;\n                return y;\n              }\n            ),\n            hiddenValues: detail,\n          });\n        }\n        if ((item as LanedCellData).lanes.length > 1) {\n          item.lanes?.splice(0, 1);\n        }\n      }\n    });\n  }\n}\n\nexport function validateFormat(cellData: InputCellData): boolean {\n  const isText = cellData.type === \"input\" || cellData.type === \"textarea\";\n  if (\n    isText &&\n    cellData.value &&\n    cellData.format &&\n    cellData.format !== \"none\"\n  ) {\n    let pattern: string;\n    if (cellData.format === \"custom\") {\n      pattern = cellData.customFormat || \"\";\n    } else if (cellData.format === \"mobile\") {\n      pattern = \"^1\\\\d{10}$\";\n    } else if (cellData.format === \"email\") {\n      pattern = \"^\\\\S+@\\\\S+$\";\n    } else {\n      throw `Incorrect format type: ${cellData.format}.`;\n    }\n    if (!(cellData.value as string).match(pattern)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function validateRequired(cellData: CellData): boolean {\n  return !cellData.required || cellData.value;\n}\n","import {\n  CellData,\n  CellLocation,\n  LanedCellData,\n  ReducerActionProps,\n} from \"../schema\";\nimport { set, validateFormat, validateRequired } from \"../util\";\nimport { DragItem } from \"./DnDCell\";\nimport { CustomCell } from \"./Cell\";\nimport { InputCellData } from \"../InputCell/schema\";\nimport { message } from \"antd\";\n\nexport function clone(src: CellData): CellData {\n  const copy = JSON.parse(JSON.stringify(src));\n  forEach(src, (src) => {\n    forEach(copy, (dest) => {\n      if (dest.id === src.id) {\n        if (typeof src.required === \"function\") {\n          dest.required = src.required;\n        }\n        if (src.onChange) {\n          dest.onChange = src.onChange;\n        }\n        if (src.onClick) {\n          dest.onClick = src.onClick;\n        }\n      }\n    });\n  });\n  return copy;\n}\n\n/**\n * Clone and iterate nested CellData\n * @param root\n * @param handler\n */\nexport function cloneAndForEach(\n  root: CellData,\n  handler: (\n    value: CellData,\n    index: number | null,\n    array: CellData[] | null\n  ) => void\n): CellData {\n  const copy = clone(root);\n  forEach(copy, handler);\n  return copy;\n}\n\n/**\n * Iterate nested CellData\n * @param root\n * @param handler\n */\nexport function forEach(\n  root: CellData,\n  handler: (\n    value: CellData,\n    index: number | null,\n    array: CellData[] | null\n  ) => void\n): void {\n  const recursion = function (data: CellData): void {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (let i = 0; i < lane.cellDataList.length; i++) {\n          const cellData = lane.cellDataList[i];\n          handler(cellData, i, lane.cellDataList);\n          if (\n            cellData.type === \"grid\" ||\n            cellData.type === \"list\" ||\n            cellData.type === \"tab\"\n          ) {\n            recursion(cellData);\n          }\n        }\n      }\n    }\n  };\n  handler(root, null, null);\n  recursion(root);\n}\n\nexport function filter(\n  root: CellData,\n  predicate: (item: CellData) => boolean\n): CellData[];\nexport function filter(root: CellData, type: string): CellData[];\nexport function filter(\n  root: CellData,\n  predicate: ((item: CellData) => boolean) | string\n): CellData[] {\n  const result: CellData[] = [];\n  forEach(root, (value) => {\n    if (\n      (typeof predicate === \"function\" && predicate(value)) ||\n      (typeof predicate === \"string\" && value.type === predicate)\n    ) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nexport function locate(\n  root: CellData,\n  matchFunc: (value: CellData, index: number, array: CellData[]) => boolean\n): [CellLocation, CellData[], CellData] | null {\n  let location: [CellLocation, CellData[], CellData] | null = null;\n  const func = function (\n    data: CellData\n  ): [CellLocation, CellData[], CellData] | null {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (let i = 0; i < lane.cellDataList.length; i++) {\n          const cellData = lane.cellDataList[i];\n          if (matchFunc(cellData, i, lane.cellDataList)) {\n            location = [\n              {\n                parentId: data.id,\n                laneIndex: data.lanes?.indexOf(lane),\n                index: i,\n              },\n              lane.cellDataList,\n              cellData,\n            ];\n            break;\n          }\n          if (\n            cellData.type === \"grid\" ||\n            cellData.type === \"list\" ||\n            cellData.type === \"tab\"\n          ) {\n            func(cellData);\n          }\n        }\n      }\n    }\n    return location;\n  };\n  return func(root);\n}\n\nexport function deleteActive(rootCellData: CellData): void {\n  const location = locate(\n    rootCellData,\n    (item) => item.active !== undefined && item.active\n  );\n  if (location) {\n    const [cellLocation, list] = location;\n    list.splice(cellLocation.index, 1);\n  }\n}\n\nexport function getCellDataList(\n  root: CellData,\n  parentId: string,\n  index: number\n): CellData[] | null {\n  let list: CellData[] | null = null;\n  const func = function (data: CellData) {\n    if (data.id === parentId) {\n      return (data as LanedCellData).lanes[index].cellDataList;\n    }\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const cellData of lane.cellDataList) {\n          if (\n            cellData.type === \"grid\" ||\n            cellData.type === \"list\" ||\n            cellData.type === \"tab\"\n          ) {\n            if (cellData.id === parentId) {\n              list = (cellData as LanedCellData).lanes[index].cellDataList;\n            } else {\n              func(cellData);\n            }\n          }\n        }\n      }\n    }\n    return list;\n  };\n  return func(root);\n}\n\nfunction drop(\n  root: CellData,\n  cell: CellData,\n  dropItemId: string,\n  position: \"up\" | \"down\"\n) {\n  const [dropLocation, dropList] = locate(\n    root,\n    (item) => item.id === dropItemId\n  )!;\n  if (position === \"up\") {\n    dropList.splice(dropLocation.index, 0, cell);\n  } else {\n    dropList.splice(dropLocation.index + 1, 0, cell);\n  }\n  active(root, cell.id);\n}\n\nexport function reducer(state: any, action: ReducerActionProps): CellData {\n  if (!action.type) {\n    return state;\n  }\n  if (action.type === \"INIT\") {\n    return action.data;\n  }\n  const copy = clone(state);\n  if (action.type === \"POSITIONED_MOVE\") {\n    const [dragLocation, dragList, dragCell] = locate(\n      copy,\n      (item) => item.id === action.id\n    )!;\n    const location = locate(copy, (item) => item.id === action.dropItemId);\n    if (location) {\n      dragList.splice(dragLocation.index, 1);\n      drop(copy, dragCell, action.dropItemId, action.position);\n    }\n  } else if (action.type === \"POSITIONED_ADD\") {\n    const location = locate(copy, (item) => item.id === action.dropItemId);\n    if (location) {\n      drop(copy, action.dragItem, action.dropItemId, action.position);\n    }\n  } else if (action.type === \"ADD\") {\n    const cells = getCellDataList(\n      copy,\n      action.location.parentId,\n      action.location.index\n    )!;\n    cells.push(action.dragItem);\n    active(copy, action.dragItem.id);\n  } else if (action.type === \"UPDATE\") {\n    const [location, list] = locate(\n      copy,\n      (data) => data.id === (action.id || action.data.id)\n    )!;\n    list.splice(location.index, 1, action.data);\n  } else if (action.type === \"MOVE\") {\n    const [location, list, cell] = locate(\n      copy,\n      (item) => item.id === action.id\n    )!;\n    list.splice(location.index, 1);\n    const cellDataList = getCellDataList(\n      copy,\n      action.location.parentId,\n      action.location.index\n    );\n    cellDataList?.push(cell);\n    active(copy, cell.id);\n  } else if (action.type === \"DELETE\") {\n    const [location, list] = locate(copy, (item) => item.id === action.id)!;\n    list.splice(location.index, 1);\n  } else if (action.type === \"ACTIVE\") {\n    active(copy, action.id);\n  } else if (action.type === \"DELETE_ACTIVE\") {\n    deleteActive(copy);\n  } else if (action.type === \"SET\") {\n    set(copy, action.targetId, action.key, action.value);\n  } else if (action.type === \"SET_VALUE\") {\n    set(copy, action.targetId, \"value\", action.value);\n  } else if (action.type === \"SET_OPTION\") {\n    set(copy, action.targetId, \"options\", action.options);\n  } else if (action.type === \"VALIDATE\") {\n    return cloneAndForEach(state, function (cellData) {\n      if (!validateRequired(cellData)) {\n        cellData.warning = `${cellData.label} is required.`;\n        cellData.warnable = true;\n      } else if (!validateFormat(cellData as InputCellData)) {\n        cellData.warning = `${cellData.label} is incorrect.`;\n        cellData.warnable = true;\n      } else {\n        cellData.warnable = false;\n        cellData.warning = \"\";\n      }\n    });\n  } else if (action.type === \"DELETE_LANE\") {\n    const location = locate(copy, (value) => value.id === action.parentId);\n    if (location) {\n      if (location[2].lanes.length > 1) {\n        location[2].lanes.splice(action.index, 1);\n      } else {\n        message.error(`最后一行无法删除`);\n      }\n    }\n  }\n  return copy;\n}\n\nexport function getActive(root: CellData): CellData | null {\n  const location = locate(\n    root,\n    (item) => item.active !== undefined && item.active\n  );\n  return location ? location[2] : null;\n}\n\nexport function active(root: CellData, id: string): void {\n  forEach(root, function (cellData) {\n    cellData.active = id === cellData.id;\n  });\n}\n\nexport function createWidgetInstance(\n  item: DragItem,\n  customCells?: CustomCell[]\n): CellData {\n  if (item.createWidgetInstance) {\n    return item.createWidgetInstance();\n  } else if (customCells) {\n    const find = customCells.find(\n      (customCell) => customCell.type === item.type\n    );\n    if (find && find.createWidgetInstance) {\n      return find.createWidgetInstance();\n    }\n  }\n  return createBasicWidgetInstance(item.type);\n}\n\nexport function createBasicWidgetInstance(type: string): CellData {\n  const cellData: CellData = {\n    type: type,\n    id: type + new Date().getTime(),\n    active: false,\n    label: type,\n  };\n  if (cellData.type === \"grid\") {\n    cellData.lanes = [\n      { span: 12, cellDataList: [] },\n      { span: 12, cellDataList: [] },\n    ];\n  } else if (cellData.type === \"tab\") {\n    cellData.lanes = [\n      { span: 24, cellDataList: [] },\n      { span: 0, cellDataList: [] },\n    ];\n    cellData.tabs = [\"Tab 1\", \"Tab 2\"];\n  } else if (cellData.type === \"list\") {\n    cellData.label = \"List\";\n    cellData.lanes = [{ cellDataList: [], span: 100 }];\n  } else if (cellData.type === \"select\") {\n    cellData.options = [];\n  }\n  return cellData;\n}\n","import {\n  AiOutlineCalendar,\n  AiOutlineCheckSquare,\n  AiOutlineDownSquare,\n  AiOutlineEdit,\n  AiOutlineFontSize,\n  AiOutlineOrderedList,\n  AiOutlineTable,\n} from \"react-icons/ai\";\nimport React from \"react\";\nimport { WidgetData } from \"../schema\";\n\nexport const WidgetGroups: { name: string; widgets: WidgetData[] }[] = [\n  {\n    name: \"Basic\",\n    widgets: [\n      {\n        type: \"input\",\n        icon: <AiOutlineEdit />,\n        name: \"Input\",\n      },\n      {\n        type: \"textarea\",\n        icon: <AiOutlineEdit />,\n        name: \"Textarea\",\n      },\n      {\n        type: \"select\",\n        icon: <AiOutlineDownSquare />,\n        name: \"Select\",\n      },\n      {\n        type: \"datetime\",\n        icon: <AiOutlineCalendar />,\n        name: \"Datepicker\",\n      },\n      {\n        type: \"checkbox\",\n        icon: <AiOutlineCheckSquare />,\n        name: \"Checkbox\",\n      },\n      {\n        type: \"label\",\n        icon: <AiOutlineFontSize />,\n        name: \"Label\",\n      },\n    ],\n  },\n  {\n    name: \"Layout\",\n    widgets: [\n      { type: \"grid\", icon: <AiOutlineTable />, name: \"Grid\" },\n      { type: \"tab\", icon: <AiOutlineTable />, name: \"Tab\" },\n      {\n        type: \"list\",\n        icon: <AiOutlineOrderedList />,\n        name: \"List\",\n      },\n    ],\n  },\n];\n","import React, { useCallback } from \"react\";\nimport { CellData, ReducerActionProps } from \"../schema\";\nimport { getValue as fetchValue } from \"../util\";\nimport { Option } from \"../../schema\";\n\nexport interface Interactions {\n  setValue: (id: string, value: any) => void;\n  setOption: (id: string, options: Option[]) => void;\n  getValue: (id: string) => any;\n  set: (id: string, key: string, value: any) => void;\n}\n\nexport default function useInteractions(\n  dispatch: React.Dispatch<ReducerActionProps>,\n  root: CellData\n): Interactions {\n  const setValue = useCallback(\n    (id: string, value: any) => {\n      dispatch({\n        type: \"SET_VALUE\",\n        targetId: id,\n        value,\n      });\n    },\n    [dispatch]\n  );\n  const setOption = useCallback(\n    (id: string, options: Option[]) => {\n      dispatch({\n        type: \"SET_OPTION\",\n        options: options,\n        targetId: id,\n      });\n    },\n    [dispatch]\n  );\n  const getValue = useCallback(\n    (id: string): any => {\n      return fetchValue(root, id);\n    },\n    [root]\n  );\n  const set = useCallback(\n    (id: string, key: string, value: any) => {\n      dispatch({\n        type: \"SET\",\n        targetId: id,\n        key,\n        value,\n      });\n    },\n    [dispatch]\n  );\n  return { setValue, setOption, getValue, set };\n}\n","import React, { forwardRef, useImperativeHandle, useReducer } from \"react\";\nimport { Cell, CustomCell } from \"./Designer/Cell\";\nimport { forEach, reducer } from \"./Designer/util\";\nimport { CellData, ConstrainViolation } from \"./schema\";\nimport {\n  getValues,\n  InteractContext,\n  validateFormat,\n  validateRequired,\n} from \"./util\";\nimport { useUpdateEffect } from \"react-use\";\nimport useInteractions from \"./hooks/interactions\";\nimport { InputCellData } from \"./InputCell/schema\";\n\nexport interface InstanceProps {\n  data: CellData;\n  customCells?: CustomCell[];\n}\n\n/**\n * Instance context provides the same utilities with designer context,\n * but also allows user's input\n */\nexport const InstanceContext = React.createContext<any>(null);\nconst Form = forwardRef(({ data, customCells }: InstanceProps, ref: any) => {\n  const [innerData, dispatch] = useReducer(reducer, data);\n  useImperativeHandle(ref, () => ({\n    getData: function () {\n      return getValues(innerData);\n    },\n    validate: function (): ConstrainViolation[] {\n      dispatch({\n        type: \"VALIDATE\",\n      });\n      const constraintViolations: ConstrainViolation[] = [];\n      forEach(innerData, function (cellData) {\n        if (!validateRequired(cellData)) {\n          constraintViolations.push({\n            id: cellData.id,\n            message: `${cellData.label} 不能为空`,\n            value: cellData.value,\n            description: \"required\",\n          });\n        }\n\n        if (!validateFormat(cellData as InputCellData)) {\n          constraintViolations.push({\n            id: cellData.id,\n            message: `${cellData.label} 格式有误`,\n            value: cellData.value,\n            description: \"format\",\n          });\n        }\n      });\n      return constraintViolations;\n    },\n  }));\n  const interactions = useInteractions(dispatch, innerData);\n  useUpdateEffect(() => {\n    dispatch({ type: \"INIT\", data });\n  }, [data]);\n  return (\n    <InstanceContext.Provider value={dispatch}>\n      <InteractContext.Provider value={interactions}>\n        <Cell\n          ref={ref}\n          cellData={innerData}\n          className={\"preview\"}\n          customCells={customCells}\n        />\n      </InteractContext.Provider>\n    </InstanceContext.Provider>\n  );\n});\n\nexport default Form;\n","import React, { forwardRef, useContext, useMemo, useState } from \"react\";\nimport {\n  CellData,\n  ReducerActionProps,\n  SwimlaneLocation,\n} from \"../../../../schema\";\nimport { DnDCell } from \"../../../DnDCell\";\nimport { Cell, CustomCell } from \"../../index\";\nimport { InstanceContext } from \"../../../../index\";\nimport { Button, Col } from \"antd\";\nimport DeleteOutlined from \"@ant-design/icons/DeleteOutlined\";\nimport { useTimeoutFn } from \"react-use\";\n\ninterface LaneProps {\n  cellDataList: CellData[];\n  direction: \"horizontal\" | \"vertical\";\n  className?: string;\n  span?: number;\n  customCells?: CustomCell[];\n  location: SwimlaneLocation;\n}\n\nexport const Lane = forwardRef(\n  (\n    {\n      cellDataList,\n      direction,\n      className,\n      span = 24,\n      customCells,\n      location,\n    }: LaneProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext<React.Dispatch<ReducerActionProps>>(\n      InstanceContext\n    );\n    const [mouseOver, setMouseOver] = useState<boolean>(false);\n    const [, cancel, reset] = useTimeoutFn(() => {\n      setMouseOver(false);\n    }, 1000);\n    const cells = useMemo(() => {\n      return cellDataList.map((child, index) => {\n        const props = {\n          location,\n          key: child.id,\n          layout: direction,\n          cellData: child,\n          customCells,\n          style: {\n            width: child.width,\n          },\n        };\n        return instanceDispatch === null ? (\n          <DnDCell {...props} index={index} />\n        ) : (\n          <Cell {...props} />\n        );\n      });\n    }, [cellDataList, customCells, direction, instanceDispatch, location]);\n\n    return (\n      <Col\n        span={span}\n        onMouseOver={() => {\n          cancel();\n          setMouseOver(true);\n        }}\n        onMouseOut={reset}\n        className={`lane ${direction}${className || \"\"}`}\n      >\n        <div className=\"w-full h-full relative min-h-px-42\" ref={ref}>\n          {cells}\n          {direction === \"vertical\" && mouseOver && (\n            <Button\n              onClick={() =>\n                instanceDispatch({\n                  type: \"DELETE_LANE\",\n                  ...location,\n                })\n              }\n              className=\"absolute cursor-pointer -right-px-16 top-px-8\"\n              type={\"link\"}\n              size={\"small\"}\n              icon={<DeleteOutlined />}\n            />\n          )}\n        </div>\n      </Col>\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { Lane } from \"./Lane\";\nimport { CellData, SwimlaneLocation } from \"../../../../schema\";\nimport { DesignerContext } from \"../../../index\";\nimport { createWidgetInstance } from \"../../../util\";\nimport { CustomCell } from \"../../index\";\n\ninterface LaneProps {\n  cellDataList: CellData[];\n  direction: \"horizontal\" | \"vertical\";\n  location: SwimlaneLocation;\n  span?: number;\n  customCells?: CustomCell[];\n}\n\nexport const DndLane = function ({\n  cellDataList,\n  direction,\n  location,\n  span = 24,\n  customCells,\n}: LaneProps) {\n  const dispatch = useContext(DesignerContext);\n  const [{ isOver }, drop] = useDrop({\n    accept: [\n      \"input\",\n      \"grid\",\n      \"textarea\",\n      \"select\",\n      \"datetime\",\n      \"checkbox\",\n      \"list\",\n      \"instance\",\n      \"label\",\n      \"tab\",\n      ...(customCells || []).map((item) => item.type),\n    ],\n    drop: (item: any, monitor) => {\n      if (isOver) {\n        const clientOffset = monitor.getClientOffset();\n        if (!clientOffset) {\n          return;\n        }\n\n        if (item.type === \"instance\") {\n          dispatch({\n            type: \"MOVE\",\n            id: item.id,\n            location: location,\n          });\n        } else {\n          const instance = createWidgetInstance(item, customCells);\n          dispatch({\n            type: \"ADD\",\n            dragItem: instance!,\n            location: location,\n          });\n        }\n      }\n    },\n    collect: (monitor) => {\n      let isOver = monitor.isOver({ shallow: true });\n      if (isOver && monitor.getItem().id === location.parentId) {\n        isOver = false;\n      }\n      return { isOver: isOver };\n    },\n  });\n  return (\n    <Lane\n      location={location}\n      span={span}\n      cellDataList={cellDataList}\n      className={isOver ? \" hovered\" : \"\"}\n      ref={drop}\n      direction={direction}\n      customCells={customCells}\n    />\n  );\n};\n","import React, { forwardRef, useContext } from \"react\";\nimport \"./index.css\";\nimport { InstanceContext } from \"../../index\";\n\ninterface FormGroupProps {\n  layout?: \"vertical\" | \"horizontal\";\n  required?: boolean;\n  warning?: string | null;\n  warnable?: boolean;\n  label?: JSX.Element | null;\n  element: JSX.Element | null;\n}\n\nexport const FormGroup = forwardRef(\n  (\n    {\n      layout = \"horizontal\",\n      required = false,\n      warning = null,\n      warnable = true,\n      label = <></>,\n      element,\n    }: FormGroupProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    return (\n      <table ref={ref} className={[\"form-group\", layout].join(\" \")}>\n        <tbody>\n          {layout === \"horizontal\" ? (\n            <>\n              <tr>\n                <td className={\"label\"}>\n                  {required ? <span className={\"required\"}>*</span> : <></>}\n                  {label}\n                </td>\n                <td className={\"element\"}>{element}</td>\n              </tr>\n              {warnable ? (\n                <tr>\n                  <td />\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          ) : (\n            <>\n              {!instanceDispatch && (\n                <tr>\n                  <td className={\"label\"}>\n                    {required ? <span className={\"required\"}>*</span> : <></>}\n                    {label}\n                  </td>\n                </tr>\n              )}\n              <tr>\n                <td className={\"element\"}>{element}</td>\n              </tr>\n              {warnable ? (\n                <tr>\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n);\n","import React, { forwardRef, useCallback, useContext, useMemo } from \"react\";\nimport { Button, Col, Row } from \"antd\";\nimport styled from \"styled-components\";\nimport update from \"immutability-helper\";\nimport { CellData, LaneData, LanedCellData } from \"../../../../schema\";\nimport { InstanceContext } from \"../../../../index\";\nimport { DndLane } from \"./DndLane\";\nimport { Lane } from \"./Lane\";\nimport \"./index.css\";\nimport { CustomCell } from \"../../index\";\nimport { FormGroup } from \"../../../FormGroup\";\n\ninterface PoolProps {\n  direction?: \"horizontal\" | \"vertical\";\n  cellData: LanedCellData;\n  customCells?: CustomCell[];\n}\n\nconst InstanceListHeaderItem = styled(Col)`\n  padding: 0 10px;\n  white-space: nowrap;\n  width: 100%;\n  overflow-x: auto;\n\n  > div {\n    width: 200px;\n    display: inline-block;\n  }\n`;\n\nexport const Pool = forwardRef(\n  (\n    { direction = \"horizontal\", cellData, customCells }: PoolProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    const isDesigner = instanceDispatch === null;\n    const getLane = useCallback(\n      (lane: LaneData, index: number) => {\n        const props = {\n          key: `${cellData.id}-${index}`,\n          direction: direction,\n          cellDataList: lane.cellDataList,\n          location: {\n            parentId: cellData.id,\n            index: index,\n          },\n          span: lane.span,\n          customCells: customCells,\n        };\n        return isDesigner ? <DndLane {...props} /> : <Lane {...props} />;\n      },\n      [cellData.id, customCells, direction, isDesigner]\n    );\n    const lanes = useMemo(\n      () => cellData.lanes.map((lane, index) => getLane(lane, index)),\n      [cellData.lanes, getLane]\n    );\n\n    return (\n      <>\n        <Row ref={ref} className={\"lanes\"}>\n          {direction === \"horizontal\" ? (\n            <>{lanes}</>\n          ) : (\n            <FormGroup\n              required={!!cellData.required}\n              warning={cellData.warning}\n              warnable={cellData.warnable}\n              element={\n                <>\n                  {!isDesigner && (\n                    <InstanceListHeaderItem span={24}>\n                      {cellData.lanes[0].cellDataList.map((item) => (\n                        <div style={{ width: item.width }} key={item.id}>\n                          {item.required && (\n                            <span style={{ color: \"red\" }}>*</span>\n                          )}\n                          <span>{item.label}</span>\n                        </div>\n                      ))}\n                    </InstanceListHeaderItem>\n                  )}\n                  {lanes}\n                  {!isDesigner && direction === \"vertical\" && (\n                    <Button\n                      size={\"small\"}\n                      onClick={() =>\n                        instanceDispatch({\n                          type: \"UPDATE\",\n                          data: update(cellData, {\n                            lanes: {\n                              $push: [\n                                update(cellData.lanes[0], {\n                                  cellDataList: {\n                                    $apply: (x: CellData[]) =>\n                                      x.map((y) => ({\n                                        ...y,\n                                        value: null,\n                                      })),\n                                  },\n                                  hiddenValues: {\n                                    $apply: () => ({}),\n                                  },\n                                }),\n                              ],\n                            },\n                          }),\n                        })\n                      }\n                      type={\"link\"}\n                    >\n                      添加行\n                    </Button>\n                  )}\n                </>\n              }\n              label={<span>{cellData.label}</span>}\n            />\n          )}\n        </Row>\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport { Pool } from \"./Pool\";\nimport { CustomCell } from \"../index\";\nimport { LanedCellData } from \"../../../schema\";\n\ninterface GridCellProps {\n  data: LanedCellData;\n  direction?: \"horizontal\" | \"vertical\";\n  customCells?: CustomCell[];\n}\n\nexport const GridCell = ({\n  data,\n  direction,\n  customCells,\n}: GridCellProps): JSX.Element => {\n  return (\n    <Pool cellData={data} direction={direction} customCells={customCells} />\n  );\n};\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { LaneData, LanedCellData } from \"../../../schema\";\nimport { Pool } from \"../GridCell/Pool\";\nimport { CustomCell } from \"../index\";\nimport styled from \"styled-components\";\nimport { DesignerContext } from \"../../index\";\nimport update from \"immutability-helper\";\nimport { InstanceContext } from \"../../../index\";\n\ninterface TabCellProps {\n  data: LanedCellData;\n  customCells?: CustomCell[];\n}\n\nconst Tab = styled(\"div\")`\n  display: inline-block;\n  padding: 10px 20px;\n  font-weight: bold;\n  min-width: 40px;\n  text-align: center;\n  cursor: pointer;\n`;\nconst ActiveTab = styled(Tab)`\n  border-bottom: 2px solid #1890ff;\n  color: #1890ff;\n`;\nconst Tabs = styled(\"div\")`\n  border-bottom: 1px solid #d3d3d3;\n`;\n\nexport const TabCell = ({ data, customCells }: TabCellProps): JSX.Element => {\n  const designerDispatch = useContext(DesignerContext);\n  const instanceDispatch = useContext(InstanceContext);\n  const isDesigner = instanceDispatch === null;\n  const dispatch = !isDesigner ? instanceDispatch : designerDispatch;\n  const [tabIndex, setTabIndex] = useState<number>(\n    data.lanes.findIndex((item) => item.span === 24)\n  );\n  const handleSwitch = useCallback(\n    (index) => {\n      setTabIndex(index);\n      dispatch({\n        type: \"UPDATE\",\n        data: update(data, {\n          lanes: {\n            $apply: (x: LaneData[] | undefined): LaneData[] =>\n              (x || []).map((y) => ({\n                ...y,\n                span: data.lanes?.indexOf(y) === index ? 24 : 0,\n              })),\n          },\n        }),\n      });\n    },\n    [data, dispatch]\n  );\n  return (\n    <>\n      <Tabs>\n        {data.lanes?.map((lane, index) => {\n          if (index === tabIndex) {\n            return <ActiveTab>{data.tabs[index]}</ActiveTab>;\n          }\n          return (\n            <Tab key={index} onClick={() => handleSwitch(index)}>\n              {data.tabs[index]}\n            </Tab>\n          );\n        })}\n      </Tabs>\n      <Pool cellData={data} customCells={customCells} />\n    </>\n  );\n};\n","import React, { forwardRef, useMemo } from \"react\";\nimport { Input } from \"antd\";\nimport { FormGroup } from \"./Designer/FormGroup\";\nimport { CellProps } from \"./schema\";\n\nconst { TextArea } = Input;\n\nexport const TextAreaCell = forwardRef(\n  ({ data, layout, onChange }: CellProps, ref: any) => {\n    const innerData = { ...data };\n    const element = useMemo(\n      () => (\n        <TextArea\n          rows={4}\n          value={innerData.value}\n          placeholder={innerData.placeholder}\n          disabled={innerData.disabled}\n          onChange={(event) => onChange(event.target.value)}\n        />\n      ),\n      [innerData.disabled, innerData.placeholder, innerData.value, onChange]\n    );\n    return (\n      <>\n        <FormGroup\n          ref={ref}\n          required={!!innerData.required}\n          warning={innerData.warning}\n          layout={layout}\n          warnable={innerData.warnable}\n          label={\n            innerData.labeled ? (\n              <label title={innerData.label}>{innerData.label}</label>\n            ) : (\n              <></>\n            )\n          }\n          element={element}\n        />\n      </>\n    );\n  }\n);\n","import React, { useCallback, useMemo } from \"react\";\nimport { Input } from \"antd\";\nimport { CellProps } from \"../schema\";\nimport { FormGroup } from \"../Designer/FormGroup\";\n\nconst InputCell = ({ data, layout, onChange }: CellProps): JSX.Element => {\n  const label = useMemo(\n    () =>\n      data.labeled ? <label title={data.label}>{data.label}</label> : <></>,\n    [data.label, data.labeled]\n  );\n\n  const handleChange = useCallback(\n    (event) => {\n      onChange(event.target.value);\n    },\n    [onChange]\n  );\n\n  const element = useMemo(\n    () => (\n      <Input\n        disabled={data.disabled}\n        value={data.value}\n        placeholder={data.placeholder}\n        onChange={handleChange}\n      />\n    ),\n    [data.disabled, data.placeholder, data.value, handleChange]\n  );\n\n  return (\n    <>\n      <FormGroup\n        required={typeof data.required === \"function\" ? true : data.required}\n        warning={data.warning}\n        layout={layout}\n        warnable={data.warnable}\n        label={label}\n        element={element}\n      />\n    </>\n  );\n};\nexport default InputCell;\n","import React, { forwardRef } from \"react\";\nimport { Switch } from \"antd\";\nimport { CellProps } from \"../schema\";\nimport { FormGroup } from \"../Designer/FormGroup\";\n\nexport const SwitchCell = forwardRef(\n  ({ data, layout, onChange }: CellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={typeof data.required === \"function\" ? true : data.required}\n        warning={data.warning}\n        layout={layout}\n        warnable={data.warnable!}\n        label={\n          data.labeled ? <label title={data.label}>{data.label}</label> : <></>\n        }\n        element={\n          <Switch\n            checked={data.value}\n            onChange={(checked) => onChange(checked)}\n            disabled={data.disabled}\n          />\n        }\n      />\n    </>\n  )\n);\n","import React, { forwardRef } from \"react\";\nimport { CellProps } from \"../schema\";\n\nexport const LabelCell = forwardRef(({ data }: CellProps, ref: any) => (\n  <div style={{ height: 42, padding: \"0 10px\" }} ref={ref}>\n    <label style={{ lineHeight: \"42px\" }} title={data.label}>\n      {data.label || \" \"}\n    </label>\n  </div>\n));\n","import React, { forwardRef, useCallback, useMemo } from \"react\";\nimport { DatePicker } from \"antd\";\nimport { FormGroup } from \"../Designer/FormGroup\";\nimport { CellProps } from \"../schema\";\nimport moment from \"moment\";\n\nconst elementStyle = { width: \"100%\" };\n\nexport const DateCell = forwardRef(\n  ({ data, layout, onChange }: CellProps, ref: any) => {\n    const handleChange = useCallback(\n      (date) => onChange(date ? date.format(\"YYYY-MM-DD HH:mm:ss\") : null),\n      [onChange]\n    );\n\n    const label = useMemo(\n      () =>\n        data.labeled ? <label title={data.label}>{data.label}</label> : <></>,\n      [data.label, data.labeled]\n    );\n\n    return (\n      <>\n        <FormGroup\n          ref={ref}\n          required={!!data.required}\n          warning={data.warning}\n          layout={layout}\n          warnable={data.warnable!}\n          label={label}\n          element={\n            <DatePicker\n              style={elementStyle}\n              disabled={data.disabled}\n              value={data.value ? moment(data.value) : null}\n              placeholder={data.placeholder}\n              onChange={handleChange}\n            />\n          }\n        />\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport { Select } from \"antd\";\nimport { FormGroup } from \"../Designer/FormGroup\";\nimport { CellProps } from \"../schema\";\nimport { SelectCellData } from \"./schema\";\n\nconst { Option } = Select;\n\ninterface SelectCellProps extends CellProps {\n  data: SelectCellData;\n}\n\nexport const SelectCell = ({\n  data,\n  layout,\n  onChange,\n}: SelectCellProps): JSX.Element => {\n  return (\n    <>\n      <FormGroup\n        required={!!data.required}\n        warning={data.warning}\n        layout={layout}\n        warnable={data.warnable}\n        label={\n          data.labeled ? <label title={data.label}>{data.label}</label> : <></>\n        }\n        element={\n          <Select\n            placeholder={data.placeholder}\n            disabled={data.disabled}\n            style={{ width: \"100%\" }}\n            onChange={(value) => onChange(value)}\n          >\n            {data.options.map((option) => (\n              <Option key={option.value} value={option.value}>\n                {option.label}\n              </Option>\n            ))}\n          </Select>\n        }\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { CellProps } from \"../schema\";\nimport { FormGroup } from \"../Designer/FormGroup\";\nimport { Checkbox } from \"antd\";\n\nexport default function CheckboxCell({\n  data,\n  layout,\n  onChange,\n}: CellProps): JSX.Element {\n  return (\n    <>\n      <FormGroup\n        layout={layout}\n        required={!!data.required}\n        warnable={data.warnable}\n        label={<label>{data.label}</label>}\n        element={\n          <>\n            <Checkbox.Group\n              options={data.options}\n              onChange={(checkedValues) => onChange(checkedValues)}\n            />\n          </>\n        }\n      />\n    </>\n  );\n}\n","import React, {\n  CSSProperties,\n  forwardRef,\n  FunctionComponent,\n  useCallback,\n  useContext,\n  useMemo,\n} from \"react\";\nimport {\n  CellData,\n  CellProps as ActualCellProps,\n  DispatchSetValueProps,\n  LanedCellData,\n  SwimlaneLocation,\n  TabCellData,\n} from \"../../schema\";\nimport { GridCell } from \"./GridCell\";\nimport { InstanceContext } from \"../../index\";\nimport { Interactions } from \"../../hooks/interactions\";\nimport { InteractContext } from \"../../util\";\nimport { TabCell } from \"./TabCell\";\nimport { DesignerContext } from \"../index\";\nimport { TextAreaCell } from \"../../TextAreaCell\";\nimport InputCell from \"../../InputCell\";\nimport { SwitchCell } from \"../../SwitchCell\";\nimport { LabelCell } from \"../../LabelCell/LabelCell\";\nimport { DateCell } from \"../../DateCell\";\nimport { SelectCell } from \"../../SelectCell\";\nimport CheckboxCell from \"../../CheckboxCell\";\nimport { SelectCellData } from \"../../SelectCell/schema\";\n\nexport interface CustomCell {\n  type: string;\n  cell: FunctionComponent<ActualCellProps>;\n  config?: FunctionComponent<{\n    data: CellData;\n    onChange: (data: CellData) => void;\n  }>;\n  icon?: JSX.Element;\n  name?: string;\n  createWidgetInstance?: () => CellData;\n}\ninterface CellProps {\n  cellData: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  style?: CSSProperties;\n  onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  className?: string;\n  customCells?: CustomCell[];\n  children?: JSX.Element;\n  location?: SwimlaneLocation;\n}\nexport const Cell = forwardRef(\n  (\n    {\n      cellData,\n      layout = \"horizontal\",\n      style,\n      onClick,\n      className,\n      customCells,\n      children,\n      location,\n    }: CellProps,\n    ref: any\n  ) => {\n    // todo: should prevent from remove required cell\n\n    const instanceDispatch = useContext(InstanceContext);\n    const designerDispatch = useContext(DesignerContext);\n    const data = useMemo(\n      (): CellData => ({\n        required: false,\n        warnable: false,\n        layout: \"default\",\n        labeled: true,\n        ...cellData,\n      }),\n      [cellData]\n    );\n    const interactions = useContext<Interactions>(InteractContext);\n    const onChange = useCallback(\n      (value: unknown, valueObject: any) => {\n        const targetId =\n          location && layout === \"vertical\"\n            ? `${location.parentId}.${location.index}.${data.id}`\n            : data.id;\n        const command: DispatchSetValueProps = {\n          type: \"SET_VALUE\",\n          targetId,\n          value: value,\n        };\n        if (instanceDispatch) {\n          instanceDispatch(command);\n        } else {\n          designerDispatch(command);\n        }\n\n        const unstagedValues: any = {};\n        data.onChange?.(\n          value,\n          {\n            ...interactions,\n            /**\n             * Wrapper to replace the result of default getValue with unstaged values\n             * @param id: e.g., name, details.0.name, details.name\n             */\n            getValue(id: string): unknown | unknown[] {\n              for (const unstagedId in unstagedValues) {\n                if (\n                  !Object.prototype.hasOwnProperty.call(\n                    unstagedValues,\n                    unstagedId\n                  )\n                ) {\n                  continue;\n                }\n\n                const unstagedValue = unstagedValues[unstagedId];\n\n                if (id === unstagedId) {\n                  return unstagedValue;\n                }\n\n                const unstagedIds = unstagedId.split(\".\");\n\n                if (\n                  unstagedIds.length === 3 &&\n                  id === `${unstagedIds[0]}.${unstagedIds[2]}`\n                ) {\n                  const values = interactions.getValue(id);\n                  // replace stage value with unstaged value\n                  values.splice(parseInt(unstagedIds[1]), 1, unstagedValue);\n                  return values;\n                }\n              }\n              return interactions.getValue(id);\n            },\n            /**\n             * Wrapper to save value to unstaged values\n             * @param id: e.g., name, details.0.name, details.name\n             * @param value: value of component\n             */\n            setValue(id: string, value: unknown): void {\n              unstagedValues[id] = value;\n              interactions.setValue(id, value);\n            },\n          },\n          valueObject,\n          location\n        );\n      },\n      [data, designerDispatch, instanceDispatch, interactions, layout, location]\n    );\n    const props = useMemo(\n      () => ({\n        onChange,\n        data,\n        layout,\n      }),\n      [data, layout, onChange]\n    );\n    return (\n      <>\n        <div\n          ref={ref}\n          style={{ ...style, position: \"relative\" }}\n          className={`instance ${\n            !instanceDispatch && data.active ? \" active \" : \" \"\n          }${className || \"\"}`}\n          onClick={onClick}\n        >\n          {children}\n          {data.type === \"input\" ? (\n            <InputCell {...props} />\n          ) : data.type === \"textarea\" ? (\n            <TextAreaCell {...props} />\n          ) : data.type === \"grid\" ? (\n            <GridCell data={data as LanedCellData} customCells={customCells} />\n          ) : data.type === \"list\" ? (\n            <GridCell\n              data={data as LanedCellData}\n              direction={\"vertical\"}\n              customCells={customCells}\n            />\n          ) : data.type === \"select\" ? (\n            <SelectCell {...props} data={data as SelectCellData} />\n          ) : data.type === \"datetime\" ? (\n            <DateCell {...props} />\n          ) : data.type === \"checkbox\" ? (\n            <CheckboxCell {...props} />\n          ) : data.type === \"label\" ? (\n            <LabelCell {...props} />\n          ) : data.type === \"switch\" ? (\n            <SwitchCell {...props} />\n          ) : data.type === \"tab\" ? (\n            <TabCell\n              {...props}\n              data={data as TabCellData}\n              customCells={customCells}\n            />\n          ) : (\n            (customCells &&\n              customCells.some((item) => item.type === data.type) &&\n              React.createElement(\n                customCells.filter((item) => item.type === data.type)[0].cell,\n                props\n              )) || (\n              <>\n                <span>{`Not found: ${data.type} of ${customCells\n                  ?.map((item) => item.type)\n                  .join(\", \")}`}</span>\n              </>\n            )\n          )}\n        </div>\n      </>\n    );\n  }\n);\n","import React, { CSSProperties, useContext, useRef, useState } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { CellData, SwimlaneLocation } from \"../schema\";\nimport { DesignerContext } from \"./index\";\nimport { createWidgetInstance } from \"./util\";\nimport { Cell, CustomCell } from \"./Cell\";\nimport DeleteTwoTone from \"@ant-design/icons/DeleteTwoTone\";\n\ninterface DnDCellProps {\n  cellData: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  index: number;\n  className?: string;\n  customCells?: CustomCell[];\n  location?: SwimlaneLocation;\n  style?: CSSProperties;\n}\n\nexport interface DragItem {\n  index: number;\n  id: string;\n  type: string;\n  createWidgetInstance?: () => CellData;\n}\n\nexport const DnDCell = function ({\n  cellData,\n  index,\n  layout = \"horizontal\",\n  className,\n  customCells,\n  location,\n  style,\n}: DnDCellProps): JSX.Element {\n  const data = {\n    required: false,\n    warnable: false,\n    layout: \"default\",\n    labeled: true,\n    ...cellData,\n  };\n  const ref = useRef<any>(null);\n  const designerDispatch = useContext(DesignerContext);\n  const [dropClassName, setDropClassName] = useState<\n    | \"\"\n    | \" drop-over-leftward\"\n    | \" drop-over-rightward\"\n    | \" drop-over-upward\"\n    | \" drop-over-downward\"\n  >(\"\");\n  const [{ isOver }, drop] = useDrop({\n    accept: [\n      \"instance\",\n      \"input\",\n      \"textarea\",\n      \"select\",\n      \"checkbox\",\n      \"datetime\",\n      \"grid\",\n      \"list\",\n      \"label\",\n      \"tab\",\n      ...(customCells || []).map((item) => item.type),\n    ],\n    hover: (item: DragItem, monitor) => {\n      if (\n        !ref.current ||\n        !monitor.isOver({ shallow: true }) ||\n        monitor.getItem().id === cellData.id ||\n        !monitor.getClientOffset()\n      ) {\n        setDropClassName(\"\");\n        return;\n      }\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n      const clientOffset = monitor.getClientOffset();\n      const coord = clientOffset as XYCoord;\n      if (layout === \"horizontal\") {\n        const hoverMiddleY =\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n        const hoverClientY = coord.y - hoverBoundingRect.top;\n        setDropClassName(\n          hoverClientY > hoverMiddleY\n            ? \" drop-over-downward\"\n            : \" drop-over-upward\"\n        );\n      } else {\n        const hoverMiddleX =\n          (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n        const hoverClientX = coord.x - hoverBoundingRect.left;\n        setDropClassName(\n          hoverClientX > hoverMiddleX\n            ? \" drop-over-rightward\"\n            : \" drop-over-leftward\"\n        );\n      }\n    },\n    collect: (monitor) => {\n      return {\n        isOver: monitor.isOver({ shallow: true }),\n      };\n    },\n    drop(item: DragItem, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      if (!monitor.isOver({ shallow: true })) {\n        return;\n      }\n\n      let position: \"up\" | \"down\";\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n      const clientOffset = monitor.getClientOffset();\n      if (!clientOffset) {\n        return;\n      }\n      if (layout === \"horizontal\") {\n        const hoverMiddleY =\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n        const hoverClientY =\n          (clientOffset as XYCoord).y - hoverBoundingRect.top;\n        position = hoverClientY > hoverMiddleY ? \"down\" : \"up\";\n      } else {\n        const hoverMiddleX =\n          (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n        const hoverClientX =\n          (clientOffset as XYCoord).x - hoverBoundingRect.left;\n        position = hoverClientX > hoverMiddleX ? \"down\" : \"up\";\n      }\n\n      if (item.type === \"instance\") {\n        designerDispatch({\n          type: \"POSITIONED_MOVE\",\n          id: monitor.getItem().id,\n          position: position,\n          dropItemId: cellData.id,\n        });\n      } else {\n        const instance = createWidgetInstance(item, customCells);\n        designerDispatch({\n          type: \"POSITIONED_ADD\",\n          position: position,\n          dropItemId: cellData.id,\n          dragItem: instance,\n        });\n      }\n    },\n  });\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: \"instance\", id: cellData.id, index },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n    begin: () => {\n      designerDispatch({\n        type: \"ACTIVE\",\n        id: cellData.id,\n      });\n    },\n  });\n  drag(drop(ref));\n\n  return (\n    <>\n      <Cell\n        location={location}\n        customCells={customCells}\n        className={`${isOver ? dropClassName : \"\"} ${className || \"\"}`}\n        onClick={(event) => {\n          event.stopPropagation();\n          designerDispatch({\n            type: \"ACTIVE\",\n            id: cellData.id,\n          });\n          designerDispatch({\n            type: \"EDIT\",\n            id: cellData.id,\n          });\n        }}\n        ref={ref}\n        style={{ opacity: isDragging ? \"0.5\" : 1, ...style }}\n        cellData={data}\n        layout={layout}\n      >\n        {data.active ? (\n          <div\n            style={{ position: \"absolute\", top: 0, right: \"4px\", zIndex: 1 }}\n          >\n            <DeleteTwoTone\n              className=\"cursor-pointer\"\n              onClick={() =>\n                designerDispatch({\n                  type: \"DELETE\",\n                  id: cellData.id,\n                })\n              }\n            />\n          </div>\n        ) : undefined}\n      </Cell>\n    </>\n  );\n};\n","import React, { useContext, useRef } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport update from \"immutability-helper\";\nimport { DesignerContext } from \"../Form/Designer\";\nimport { CellData } from \"../Form/schema\";\n\ninterface DragItem {\n  index: number;\n  type: string;\n}\n\nexport function useVerticalDragDropMemberRef(\n  index: number,\n  move: (from: number, to: number) => void\n): React.RefObject<HTMLDivElement> {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drag] = useDrag({\n    item: {\n      type: \"config\",\n      index: index,\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: \"config\",\n    hover: (item: DragItem, monitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      move(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  drag(drop(ref));\n  return ref;\n}\n\nexport function useVerticalDragDropMemberEvent(\n  data: CellData\n): {\n  onChange: (index: number, label: string) => void;\n  onRemove: (index: number) => void;\n  move: (from: number, to: number) => void;\n} {\n  const designerDispatch = useContext(DesignerContext);\n  return {\n    onChange(index: number, label: string) {\n      designerDispatch({\n        type: \"UPDATE\",\n        data: {\n          ...data,\n          options: update(data.options, {\n            [index]: {\n              label: { $set: label || \"\" },\n            },\n          }),\n        },\n      });\n    },\n    onRemove(index: number) {\n      designerDispatch({\n        type: \"UPDATE\",\n        data: {\n          ...data,\n          options: update(data.options, {\n            $splice: [[index, 1]],\n          }),\n        },\n      });\n    },\n    move(from: number, to: number) {\n      const dragItem = data.options![from]!;\n      designerDispatch({\n        type: \"UPDATE\",\n        data: {\n          ...data,\n          options: update(data.options, {\n            $splice: [\n              [from, 1],\n              [to, 0, dragItem],\n            ],\n          }),\n        },\n      });\n    },\n  };\n}\n","import React from \"react\";\nimport { AiOutlineMenu, AiOutlineMinusCircle } from \"react-icons/ai\";\nimport { Button, InputNumber } from \"antd\";\nimport { LaneData } from \"../../../schema\";\nimport { useVerticalDragDropMemberRef } from \"../../../../hook\";\n\ninterface DragItem {\n  index: number;\n  type: string;\n}\n\ninterface LaneConfigProps {\n  index: number;\n  data: LaneData;\n  move: (from: number, to: number) => void;\n  onRemove: () => void;\n  onResize: (span: string | number | undefined) => void;\n}\n\nexport default function LaneConfig({\n  index,\n  data,\n  move,\n  onRemove,\n  onResize,\n}: LaneConfigProps) {\n  const ref = useVerticalDragDropMemberRef(index, move);\n  return (\n    <>\n      <div ref={ref}>\n        <AiOutlineMenu style={{ cursor: \"move\" }} />\n        <InputNumber\n          onChange={onResize}\n          value={data.span}\n          size={\"small\"}\n          style={{\n            width: \"60px\",\n            margin: \"0 4px\",\n          }}\n        />\n        <Button type={\"link\"} onClick={onRemove} style={{ padding: \"0\" }}>\n          <AiOutlineMinusCircle />\n        </Button>\n      </div>\n    </>\n  );\n}\n","export const labelCol = { span: 8 };\n","import React, { useContext } from \"react\";\nimport LaneConfig from \"./LaneConfig\";\nimport update from \"immutability-helper\";\nimport { Button, Form } from \"antd\";\nimport { DesignerContext } from \"../../index\";\nimport { labelCol } from \"../../constant\";\nimport { LanedCellData } from \"../../../schema\";\n\nexport default function GridCellConfig({\n  data,\n}: {\n  data: LanedCellData;\n}): JSX.Element {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <Form labelCol={labelCol}>\n      <Form.Item label={\"Column\"}>\n        <>\n          {data &&\n            data.lanes &&\n            data.lanes.map((lane, index) => (\n              <LaneConfig\n                key={index}\n                index={index}\n                data={lane}\n                onResize={(span) => {\n                  const finalSpan =\n                    typeof span === \"string\" || !span ? 0 : span;\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        [index]: {\n                          span: { $set: finalSpan },\n                        },\n                      }),\n                    },\n                  });\n                }}\n                onRemove={() => {\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        $splice: [[index, 1]],\n                      }),\n                    },\n                  });\n                }}\n                move={(from, to) => {\n                  const dragItem = data.lanes[from];\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        $splice: [\n                          [from, 1],\n                          [to, 0, dragItem],\n                        ],\n                      }),\n                    },\n                  });\n                }}\n              />\n            ))}\n          <Button\n            type={\"link\"}\n            onClick={() => {\n              const copy: LanedCellData = { ...data };\n              copy.lanes.push({ cellDataList: [], span: 12 });\n              designerDispatch({\n                type: \"UPDATE\",\n                data: copy,\n              });\n            }}\n          >\n            Add\n          </Button>\n        </>\n      </Form.Item>\n    </Form>\n  );\n}\n","import React from \"react\";\nimport { WidgetData } from \"../schema\";\nimport { useDrag } from \"react-dnd\";\nimport styled from \"styled-components\";\n\ninterface WidgetProps {\n  widget: WidgetData;\n}\n\nconst StyledLi = styled.li`\n  font-size: 12px;\n  box-sizing: border-box;\n  width: 125px;\n  display: inline-block;\n  cursor: move;\n  border: 1px solid #a3a3a3;\n  padding: 5px 10px;\n  margin: 2px;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-color: white;\n\n  > * {\n    margin-right: 4px;\n    vertical-align: middle;\n  }\n`;\n\nexport function Widget({ widget }: WidgetProps) {\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type: widget.type,\n      createWidgetInstance: widget.createWidgetInstance,\n    },\n    collect: (monitor) => {\n      return {\n        isDragging: !!monitor.isDragging(),\n      };\n    },\n  });\n\n  return (\n    <StyledLi\n      key={widget.name}\n      style={{ opacity: isDragging ? \"0.5\" : 1 }}\n      ref={drag}\n    >\n      {widget.icon}\n      <span>{widget.name}</span>\n    </StyledLi>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { Widget } from \"./Widget\";\nimport { WidgetData } from \"../schema\";\n\ninterface WidgetGroupProps {\n  name: string;\n  list: WidgetData[];\n}\n\nexport default function ({ name, list }: WidgetGroupProps) {\n  return (\n    <>\n      <Fragment key={name}>\n        <div>{name}</div>\n        <ul\n          style={{\n            width: \"100%\",\n            listStyle: \"none\",\n            padding: 0,\n          }}\n        >\n          {list.map((w: WidgetData) => {\n            return <Widget key={w.name} widget={w} />;\n          })}\n        </ul>\n      </Fragment>\n    </>\n  );\n}\n","import { useContext } from \"react\";\nimport { DesignerContext } from \"../Designer\";\nimport update from \"immutability-helper\";\nimport { CellData } from \"../schema\";\n\nexport function useCellDataProp(\n  data: CellData,\n  prop: string\n): { update(value: unknown): void } {\n  const designerDispatch = useContext(DesignerContext);\n  return {\n    update(value: unknown) {\n      designerDispatch({\n        type: \"UPDATE\",\n        data: update(data, {\n          [prop]: { $set: value },\n        }),\n        id: data.id,\n      });\n    },\n  };\n}\n","import { Form, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { CellData } from \"./schema\";\nimport { useCellDataProp } from \"./hooks\";\n\nconst CellTextPropConfig = ({\n  data,\n  label,\n  prop,\n}: {\n  data: CellData;\n  prop: string;\n  label: string;\n}): JSX.Element => {\n  const { update } = useCellDataProp(data, prop);\n  const [internalValue, setInternalValue] = useState(data[prop]);\n  const handleChange = useCallback((event) => {\n    setInternalValue(event.target.value);\n  }, []);\n  const handleBlur = useCallback(\n    (event) => {\n      update(event.target.value);\n    },\n    [update]\n  );\n  return (\n    <Form.Item label={label}>\n      <Input\n        value={internalValue}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n    </Form.Item>\n  );\n};\n\nexport default CellTextPropConfig;\n","import React from \"react\";\nimport { CellData } from \"./schema\";\nimport CellTextPropConfig from \"./CellTextPropConfig\";\n\nconst CellLabelConfig = ({ data }: { data: CellData }): JSX.Element => {\n  return <CellTextPropConfig data={data} label={\"标题\"} prop={\"label\"} />;\n};\n\nexport default CellLabelConfig;\n","import React from \"react\";\nimport { CellData } from \"../schema\";\nimport { Form } from \"antd\";\nimport CellLabelConfig from \"../CellLabelConfig\";\nimport { labelCol } from \"../Designer/constant\";\n\ninterface LabelCellConfigProps {\n  data: CellData;\n}\n\nexport default function LabelCellConfig({ data }: LabelCellConfigProps) {\n  return (\n    <>\n      <Form labelCol={labelCol}>\n        <CellLabelConfig data={data} />\n      </Form>\n    </>\n  );\n}\n","import styled from \"styled-components\";\nimport { Layout } from \"antd\";\n\nconst { Header, Sider, Content } = Layout;\n\nexport const WhiteLayout = styled(Layout)`\n  background-color: white;\n`;\n\nexport const WhiteHeader = styled(Header)`\n  background-color: white;\n`;\n\nexport const WhiteSider = styled(Sider)`\n  background-color: white;\n`;\n\nexport const WhiteContent = styled(Content)`\n  background-color: white;\n`;\n","import { Form, Switch } from \"antd\";\nimport React, { useCallback } from \"react\";\nimport { CellData } from \"./schema\";\nimport { useCellDataProp } from \"./hooks\";\n\nconst CellBooleanPropConfig = ({\n  data,\n  label,\n  prop,\n}: {\n  data: CellData;\n  prop: string;\n  label: string;\n}): JSX.Element => {\n  const { update } = useCellDataProp(data, prop);\n  const handleChange = useCallback(\n    (value) => {\n      update(value);\n    },\n    [update]\n  );\n  return (\n    <Form.Item label={label}>\n      <Switch checked={!!data[prop]} onChange={handleChange} />\n    </Form.Item>\n  );\n};\n\nexport default CellBooleanPropConfig;\n","import CellBooleanPropConfig from \"./CellBooleanPropConfig\";\nimport React from \"react\";\nimport { CellData } from \"./schema\";\n\nconst CellRequiredConfig = ({ data }: { data: CellData }): JSX.Element => {\n  return (\n    <CellBooleanPropConfig data={data} prop={\"required\"} label={\"Required\"} />\n  );\n};\n\nexport default CellRequiredConfig;\n","import CellBooleanPropConfig from \"./CellBooleanPropConfig\";\nimport React from \"react\";\nimport { CellData } from \"./schema\";\n\nconst CellReadonlyConfig = ({ data }: { data: CellData }): JSX.Element => {\n  return (\n    <CellBooleanPropConfig data={data} prop={\"disabled\"} label={\"Readonly\"} />\n  );\n};\n\nexport default CellReadonlyConfig;\n","import React from \"react\";\nimport { CellData } from \"./schema\";\nimport CellTextPropConfig from \"./CellTextPropConfig\";\n\nconst CellDefaultConfig = ({ data }: { data: CellData }): JSX.Element => {\n  return (\n    <CellTextPropConfig data={data} label={\"默认值\"} prop={\"defaultValue\"} />\n  );\n};\n\nexport default CellDefaultConfig;\n","import React, { useCallback, useState } from \"react\";\nimport { CellData } from \"./schema\";\nimport { Form, Input } from \"antd\";\nimport { useCellDataProp } from \"./hooks\";\n\nconst CellIdConfig = ({ data }: { data: CellData }): JSX.Element => {\n  const { update } = useCellDataProp(data, \"id\");\n  const [internalValue, setInternalValue] = useState(data[\"id\"]);\n  const handleChange = useCallback((event) => {\n    setInternalValue(event.target.value);\n  }, []);\n  const handleBlur = useCallback(\n    (event) => {\n      if (!event.target.value) {\n        return;\n      }\n      update(event.target.value);\n    },\n    [update]\n  );\n  return (\n    <Form.Item label={\"ID\"}>\n      <Input\n        value={internalValue}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n    </Form.Item>\n  );\n};\n\nexport default CellIdConfig;\n","import React from \"react\";\nimport { CellData } from \"./schema\";\nimport CellTextPropConfig from \"./CellTextPropConfig\";\n\nconst CellOnChangeConfig = ({ data }: { data: CellData }): JSX.Element => {\n  return (\n    <CellTextPropConfig data={data} label={\"OnChange\"} prop={\"rawOnChange\"} />\n  );\n};\n\nexport default CellOnChangeConfig;\n","import React from \"react\";\nimport { CellData } from \"../schema\";\nimport { Form } from \"antd\";\nimport CellLabelConfig from \"../CellLabelConfig\";\nimport CellRequiredConfig from \"../CellRequiredConfig\";\nimport CellReadonlyConfig from \"../CellReadonlyConfig\";\nimport CellDefaultConfig from \"../CellDefaultConfig\";\nimport { labelCol } from \"./constant\";\nimport CellIdConfig from \"../CellIdConfig\";\nimport CellOnChangeConfig from \"../CellOnChangeConfig\";\n\ninterface SelectWrapperCellConfigProps {\n  data: CellData;\n}\n\nexport default function DefaultCellConfig({\n  data,\n}: SelectWrapperCellConfigProps): JSX.Element {\n  const innerData = { ...data };\n  innerData.label = innerData.label || \"自定义控件\";\n  return (\n    <>\n      <Form labelCol={labelCol}>\n        <CellIdConfig data={innerData} />\n        <CellLabelConfig data={innerData} />\n        <CellRequiredConfig data={data} />\n        <CellReadonlyConfig data={data} />\n        <CellDefaultConfig data={data} />\n        <CellOnChangeConfig data={data} />\n      </Form>\n    </>\n  );\n}\n","import React from \"react\";\nimport { AiOutlineMenu, AiOutlineMinusCircle } from \"react-icons/ai\";\nimport { Button, Input } from \"antd\";\nimport { useVerticalDragDropMemberRef } from \"../../../../../hook\";\n\ninterface DragItem {\n  index: number;\n  type: string;\n}\n\ninterface TabConfigProps {\n  index: number;\n  name: string;\n  move: (from: number, to: number) => void;\n  onRemove: () => void;\n  onRename: (tab: string) => void;\n}\n\nexport default function TabConfig({\n  index,\n  name,\n  move,\n  onRemove,\n  onRename,\n}: TabConfigProps) {\n  const ref = useVerticalDragDropMemberRef(index, move);\n  return (\n    <>\n      <div ref={ref}>\n        <AiOutlineMenu style={{ cursor: \"move\" }} />\n        <Input\n          onChange={(event) => onRename(event.target.value)}\n          value={name}\n          size={\"small\"}\n          style={{\n            width: \"60px\",\n            margin: \"0 4px\",\n          }}\n        />\n        <Button type={\"link\"} onClick={onRemove} style={{ padding: \"0\" }}>\n          <AiOutlineMinusCircle />\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport TabConfig from \"./TabConfig\";\nimport update from \"immutability-helper\";\nimport { Button, Form } from \"antd\";\nimport { DesignerContext } from \"../../../index\";\nimport { labelCol } from \"../../../constant\";\nimport { TabCellData } from \"../../../../schema\";\n\ninterface TabCellConfigProps {\n  data: TabCellData;\n}\n\nexport default function TabCellConfig({\n  data,\n}: TabCellConfigProps): JSX.Element {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <Form labelCol={labelCol}>\n      <Form.Item label={\"选项卡\"}>\n        <>\n          {data &&\n            data.tabs &&\n            data.tabs.map((tab, index) => (\n              <TabConfig\n                key={\"tab-config-\" + index}\n                index={index}\n                name={tab}\n                onRename={(name) => {\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      tabs: update(data.tabs, {\n                        [index]: { $set: name },\n                      }),\n                    },\n                  });\n                }}\n                onRemove={() => {\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      tabs: update(data.tabs, {\n                        $splice: [[index, 1]],\n                      }),\n                      lanes: update(data.lanes, {\n                        $splice: [[index, 1]],\n                      }),\n                    },\n                  });\n                }}\n                move={(from, to) => {\n                  const dragItem = data.tabs![from]!;\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      tabs: update(data.tabs, {\n                        $splice: [\n                          [from, 1],\n                          [to, 0, dragItem],\n                        ],\n                      }),\n                      lanes: update(data.lanes, {\n                        $splice: [\n                          [from, 1],\n                          [to, 0, data.lanes![from]],\n                        ],\n                      }),\n                    },\n                  });\n                }}\n              />\n            ))}\n          <Button\n            type={\"link\"}\n            onClick={() => {\n              const copy = { ...data };\n              copy.lanes!.push({ cellDataList: [], span: 0 });\n              copy.tabs?.push(\"新选项卡\");\n              designerDispatch({\n                type: \"UPDATE\",\n                data: copy,\n              });\n            }}\n          >\n            Add\n          </Button>\n        </>\n      </Form.Item>\n    </Form>\n  );\n}\n","import React from \"react\";\nimport { AiOutlineMenu, AiOutlineMinusCircle } from \"react-icons/ai\";\nimport { Button, Input } from \"antd\";\nimport { useVerticalDragDropMemberRef } from \"../../../hook\";\n\ninterface OptionConfigProps {\n  index: number;\n  label: string;\n  move: (from: number, to: number) => void;\n  onRemove: (index: number) => void;\n  onChange: (index: number, data: string) => void;\n}\n\nexport default function OptionConfig({\n  index,\n  label,\n  move,\n  onRemove,\n  onChange,\n}: OptionConfigProps): JSX.Element {\n  const ref = useVerticalDragDropMemberRef(index, move);\n  return (\n    <>\n      <div ref={ref}>\n        <AiOutlineMenu style={{ cursor: \"move\" }} />\n        <Input\n          onChange={(event) => {\n            onChange(index, event.target.value);\n          }}\n          value={label}\n          size={\"small\"}\n          style={{\n            width: \"120px\",\n            margin: \"0 4px\",\n          }}\n        />\n        <Button\n          type={\"link\"}\n          onClick={() => {\n            onRemove(index);\n          }}\n          style={{ padding: \"0\" }}\n        >\n          <AiOutlineMinusCircle />\n        </Button>\n      </div>\n    </>\n  );\n}\n","import OptionConfig from \"./SelectCell/SelectCellConfig/OptionConfig\";\nimport { Button, Form } from \"antd\";\nimport React, { useContext } from \"react\";\nimport { useVerticalDragDropMemberEvent } from \"../hook\";\nimport { DesignerContext } from \"./Designer\";\nimport { SelectCellData } from \"./SelectCell/schema\";\n\nconst CellOptionsConfig = ({ data }: { data: SelectCellData }): JSX.Element => {\n  const { onChange, onRemove, move } = useVerticalDragDropMemberEvent(data);\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <Form.Item label={\"选项\"}>\n      <>\n        {data &&\n          data.options &&\n          data.options.map((option, index) => (\n            <OptionConfig\n              key={\"option-config-\" + index}\n              index={index}\n              label={option.label}\n              onChange={onChange}\n              onRemove={onRemove}\n              move={move}\n            />\n          ))}\n        <Button\n          type={\"link\"}\n          onClick={() => {\n            const copy = { ...data };\n            copy.options!.push({ label: \"新选项\", value: +new Date() });\n            designerDispatch({\n              type: \"UPDATE\",\n              data: copy,\n            });\n          }}\n        >\n          Add\n        </Button>\n      </>\n    </Form.Item>\n  );\n};\nexport default CellOptionsConfig;\n","import React from \"react\";\nimport { Form } from \"antd\";\nimport CellLabelConfig from \"../CellLabelConfig\";\nimport CellRequiredConfig from \"../CellRequiredConfig\";\nimport CellReadonlyConfig from \"../CellReadonlyConfig\";\nimport CellOptionsConfig from \"../CellOptionsConfig\";\nimport { labelCol } from \"../Designer/constant\";\nimport { SelectCellData } from \"../SelectCell/schema\";\n\ninterface CheckboxCellConfigProps {\n  data: SelectCellData;\n}\n\nexport default function CheckboxCellConfig({\n  data,\n}: CheckboxCellConfigProps): JSX.Element {\n  return (\n    <>\n      <Form labelCol={labelCol}>\n        <CellLabelConfig data={data} />\n        <CellRequiredConfig data={data} />\n        <CellReadonlyConfig data={data} />\n        <CellOptionsConfig data={data} />\n      </Form>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Form } from \"antd\";\nimport CellLabelConfig from \"../../CellLabelConfig\";\nimport CellRequiredConfig from \"../../CellRequiredConfig\";\nimport CellReadonlyConfig from \"../../CellReadonlyConfig\";\nimport CellOptionsConfig from \"../../CellOptionsConfig\";\nimport { labelCol } from \"../../Designer/constant\";\nimport { SelectCellData } from \"../schema\";\n\ninterface SelectCellConfigProps {\n  data: SelectCellData;\n}\n\nexport default function SelectCellConfig({\n  data,\n}: SelectCellConfigProps): JSX.Element {\n  return (\n    <>\n      <Form labelCol={labelCol}>\n        <CellLabelConfig data={data} />\n        <CellRequiredConfig data={data} />\n        <CellReadonlyConfig data={data} />\n        <CellOptionsConfig data={data} />\n      </Form>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { CellData } from \"../schema\";\nimport { AutoComplete, Form, Typography } from \"antd\";\nimport CellLabelConfig from \"../CellLabelConfig\";\nimport CellRequiredConfig from \"../CellRequiredConfig\";\nimport CellReadonlyConfig from \"../CellReadonlyConfig\";\nimport { labelCol } from \"../Designer/constant\";\n\nconst { Text } = Typography;\n\ninterface DateCellConfigProps {\n  data: CellData;\n}\n\nexport default function DateCellConfig({\n  data,\n}: DateCellConfigProps): JSX.Element {\n  const defaultValueOptions = [\n    {\n      label: (\n        <>\n          <Text>now: </Text>\n          <Text type={\"secondary\"}>当前时间</Text>\n        </>\n      ),\n      text: \"now\",\n      value: \"now\",\n    },\n  ];\n  const [currentDefaultValueOptions, setCurrentDefaultValueOptions] = useState(\n    defaultValueOptions\n  );\n  return (\n    <>\n      <Form labelCol={labelCol}>\n        <CellLabelConfig data={data} />\n        <CellRequiredConfig data={data} />\n        <CellReadonlyConfig data={data} />\n        <Form.Item label={\"Default\"}>\n          <AutoComplete\n            onSearch={(searchText) => {\n              setCurrentDefaultValueOptions(\n                defaultValueOptions.filter(\n                  (item) => item.text.search(new RegExp(searchText, \"i\")) > -1\n                )\n              );\n            }}\n          >\n            {currentDefaultValueOptions.map((option) => (\n              <AutoComplete.Option value={option.value} key={option.value}>\n                {option.label}\n              </AutoComplete.Option>\n            ))}\n          </AutoComplete>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import { CSSProperties } from \"react\";\n\nexport const contentStyle: CSSProperties = {\n  height: \"100%\",\n  padding: 10,\n  borderRight: \"1px solid #d3d3d3\",\n};\n\nexport const layoutStyle: CSSProperties = { height: \"100%\" };\n\nexport const rightSiderStyle: CSSProperties = {\n  padding: 10,\n  height: \"100%\",\n  overflowY: \"auto\",\n};\n","import React from \"react\";\nimport CellTextPropConfig from \"./CellTextPropConfig\";\nimport { InputCellData } from \"./InputCell/schema\";\n\nconst CellCustomFormatConfig = ({\n  data,\n}: {\n  data: InputCellData;\n}): JSX.Element => {\n  return (\n    <CellTextPropConfig\n      data={data}\n      label={\"自定义格式\"}\n      prop={\"customFormat\"}\n    />\n  );\n};\n\nexport default CellCustomFormatConfig;\n","import { Form, Select } from \"antd\";\nimport React, { useCallback } from \"react\";\nimport { CellData } from \"./schema\";\nimport { useCellDataProp } from \"./hooks\";\n\nconst CellTextPropConfig = ({\n  data,\n  label,\n  prop,\n  options,\n}: {\n  data: CellData;\n  prop: string;\n  label: string;\n  options: { value: string; label: string }[];\n}): JSX.Element => {\n  const { update } = useCellDataProp(data, prop);\n  const handleChange = useCallback(\n    (value) => {\n      update(value);\n    },\n    [update]\n  );\n  return (\n    <Form.Item label={label}>\n      <Select onChange={handleChange} placeholder={\"无\"} value={data.format}>\n        {options.map((option) => (\n          <Select.Option key={option.value} value={option.value}>\n            {option.label}\n          </Select.Option>\n        ))}\n      </Select>\n    </Form.Item>\n  );\n};\n\nexport default CellTextPropConfig;\n","import React from \"react\";\nimport CellEnumPropConfig from \"./CellEnumPropConfig\";\nimport { InputCellData } from \"./InputCell/schema\";\n\nconst options = [\n  {\n    value: \"none\",\n    label: \"None\",\n  },\n  {\n    value: \"mobile\",\n    label: \"Mobile\",\n  },\n  {\n    value: \"email\",\n    label: \"Email\",\n  },\n  {\n    value: \"custom\",\n    label: \"Custom\",\n  },\n];\n\nconst CellFormatConfig = ({ data }: { data: InputCellData }): JSX.Element => {\n  return (\n    <CellEnumPropConfig\n      options={options}\n      data={data}\n      label={\"格式\"}\n      prop={\"format\"}\n    />\n  );\n};\n\nexport default CellFormatConfig;\n","import CellBooleanPropConfig from \"./CellBooleanPropConfig\";\nimport React from \"react\";\nimport { CellData } from \"./schema\";\n\nconst CellUniqueConfig = ({ data }: { data: CellData }): JSX.Element => {\n  return <CellBooleanPropConfig data={data} prop={\"unique\"} label={\"Unique\"} />;\n};\n\nexport default CellUniqueConfig;\n","import React from \"react\";\nimport { Form } from \"antd\";\nimport CellLabelConfig from \"../CellLabelConfig\";\nimport CellRequiredConfig from \"../CellRequiredConfig\";\nimport CellReadonlyConfig from \"../CellReadonlyConfig\";\nimport CellDefaultConfig from \"../CellDefaultConfig\";\nimport CellCustomFormatConfig from \"../CellCustomFormatConfig\";\nimport CellFormatConfig from \"../CellFormatConfig\";\nimport { InputCellData } from \"./schema\";\nimport { labelCol } from \"../Designer/constant\";\nimport CellUniqueConfig from \"../CellUniqueConfig\";\nimport CellIdConfig from \"../CellIdConfig\";\nimport CellOnChangeConfig from \"../CellOnChangeConfig\";\n\ninterface InputCellConfigProps {\n  data: InputCellData;\n}\n\nexport default function InputCellConfig({\n  data,\n}: InputCellConfigProps): JSX.Element {\n  const innerData: InputCellData = { ...data };\n  innerData.label = innerData.label || \"自定义控件\";\n  return (\n    <>\n      <Form labelCol={labelCol}>\n        <CellIdConfig data={innerData} />\n        <CellLabelConfig data={innerData} />\n        <CellRequiredConfig data={innerData} />\n        <CellReadonlyConfig data={innerData} />\n        <CellUniqueConfig data={innerData} />\n        <CellDefaultConfig data={innerData} />\n        <CellFormatConfig data={innerData} />\n        {innerData.format === \"custom\" && (\n          <CellCustomFormatConfig data={innerData} />\n        )}\n        <CellOnChangeConfig data={data} />\n      </Form>\n    </>\n  );\n}\n","import React, {\n  CSSProperties,\n  Dispatch,\n  forwardRef,\n  Ref,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport { Button, Modal, Space } from \"antd\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { clone, cloneAndForEach, getActive, reducer } from \"./util\";\nimport {\n  CellData,\n  CellDataType,\n  LanedCellData,\n  ReducerActionProps,\n  TabCellData,\n} from \"../schema\";\nimport { WidgetGroups } from \"../constants/WidgetGroups\";\nimport { DnDCell } from \"./DnDCell\";\nimport GridCellConfig from \"./Cell/GridCellConfig\";\nimport styled from \"styled-components\";\nimport WidgetGroup from \"./WidgetGroup\";\nimport LabelCellConfig from \"../LabelCell/LabelCellConfig\";\nimport { CustomCell } from \"./Cell\";\nimport { AiOutlineEdit } from \"react-icons/all\";\nimport { WhiteContent, WhiteHeader, WhiteLayout, WhiteSider } from \"../Layout\";\nimport DefaultCellConfig from \"./DefaultCellConfig\";\nimport useInteractions from \"../hooks/interactions\";\nimport Form from \"../index\";\nimport { InteractContext } from \"../util\";\nimport TabCellConfig from \"./Cell/TabCell/TabCellConfig\";\nimport \"./index.css\";\nimport CheckboxCellConfig from \"../CheckboxCell/CheckboxCellConfig\";\nimport SelectCellConfig from \"../SelectCell/SelectCellConfig\";\nimport DateCellConfig from \"../DateCell/DateCellConfig\";\nimport { contentStyle, layoutStyle, rightSiderStyle } from \"./style\";\nimport InputCellConfig from \"../InputCell/InputCellConfig\";\nimport { InputCellData } from \"../InputCell/schema\";\nimport { SelectCellData } from \"../SelectCell/schema\";\n\nconst rootCellData: CellData = {\n  type: \"grid\",\n  id: \"11270307\",\n  lanes: [{ span: 24, cellDataList: [] }],\n  active: false,\n};\n\nexport const DesignerContext = React.createContext<\n  Dispatch<ReducerActionProps>\n>({} as Dispatch<ReducerActionProps>);\nconst LeftSider = styled(WhiteSider).attrs({\n  width: 280,\n})`\n  padding: 10px;\n  border-right: 1px solid #d3d3d3;\n  height: 100%;\n  overflow-y: auto;\n`;\nconst FullHeightBorderedLayout = styled(WhiteLayout)`\n  border: 1px solid #d3d3d3;\n  height: calc(100% - 1px);\n`;\nconst ToolBar = styled(WhiteHeader)`\n  padding: 0 10px;\n  text-align: right;\n  border-bottom: 1px solid #a3a3a3;\n`;\n\nexport interface IEntityFormDesigner {\n  get: () => CellData;\n}\n\ninterface DesignerProps {\n  customCells?: CustomCell[];\n  availableCustomCells?: CustomCell[];\n  toolbar?: boolean;\n  style?: CSSProperties;\n  defaultCellData?: CellData;\n  builtinCellDataTypes?: CellDataType[];\n  onChange?: (root: CellData) => void;\n}\n\nexport const Designer = forwardRef(\n  (\n    {\n      customCells,\n      availableCustomCells,\n      toolbar = true,\n      defaultCellData,\n      builtinCellDataTypes,\n      onChange,\n      style,\n    }: DesignerProps,\n    ref: Ref<IEntityFormDesigner>\n  ) => {\n    const [data, designerDispatch] = useReducer(\n      reducer,\n      defaultCellData || rootCellData\n    );\n    const [previewDialogVisible, setPreviewDialogVisible] = useState(false);\n    const [previewData, setPreviewData] = useState<CellData | null>(null);\n    const previewRef = useRef<any>();\n    const delFunction = useCallback((event) => {\n      if (event.keyCode === 46 || (event.ctrlKey && event.keyCode === 8)) {\n        designerDispatch({ type: \"DELETE_ACTIVE\" });\n      }\n    }, []);\n    const finalAvailableCells = useMemo(() => {\n      return availableCustomCells || customCells;\n    }, [availableCustomCells, customCells]);\n    useEffect(() => {\n      document.addEventListener(\"keyup\", delFunction, false);\n      return () => document.removeEventListener(\"keyup\", delFunction, false);\n    }, [delFunction]);\n    useEffect(() => onChange?.(data), [data, onChange]);\n    useImperativeHandle(ref, () => ({\n      preview() {\n        setPreviewDialogVisible(true);\n        setPreviewData(clone(data));\n      },\n      reset() {\n        designerDispatch({\n          type: \"INIT\",\n          data: rootCellData,\n        });\n      },\n      load(data: CellData) {\n        designerDispatch({\n          type: \"INIT\",\n          data: data,\n        });\n      },\n      get() {\n        return cloneAndForEach(data, (item) => {\n          item.value = undefined;\n          item.active = false;\n        });\n      },\n    }));\n    const active = getActive(data);\n    const interactions = useInteractions(designerDispatch, data);\n    const widgetGroups = useMemo(() => {\n      if (!builtinCellDataTypes) {\n        return WidgetGroups;\n      }\n      return WidgetGroups.map((group) => ({\n        name: group.name,\n        widgets: group.widgets.filter(\n          (widget) =>\n            builtinCellDataTypes.indexOf(widget.type as CellDataType) > -1\n        ),\n      })).filter((group) => group.widgets.length > 0);\n    }, [builtinCellDataTypes]);\n\n    return (\n      <>\n        <DesignerContext.Provider value={designerDispatch}>\n          <InteractContext.Provider value={interactions}>\n            <DndProvider backend={HTML5Backend}>\n              <FullHeightBorderedLayout style={style}>\n                <LeftSider>\n                  {widgetGroups.map((g) => (\n                    <WidgetGroup key={g.name} name={g.name} list={g.widgets} />\n                  ))}\n                  {finalAvailableCells && (\n                    <WidgetGroup\n                      key={\"Custom\"}\n                      name={\"Custom\"}\n                      list={[\n                        ...finalAvailableCells.map((cell) => {\n                          return {\n                            type: cell.type,\n                            name: cell.name || \"Custom\",\n                            icon: cell.icon || <AiOutlineEdit />,\n                            createWidgetInstance: cell.createWidgetInstance,\n                          };\n                        }),\n                      ]}\n                    />\n                  )}\n                </LeftSider>\n                <WhiteContent>\n                  <WhiteLayout style={layoutStyle}>\n                    {toolbar && (\n                      <ToolBar>\n                        <Space>\n                          <Button\n                            onClick={() => {\n                              designerDispatch({\n                                type: \"INIT\",\n                                data: rootCellData,\n                              });\n                            }}\n                          >\n                            Reset\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              setPreviewDialogVisible(true);\n                              setPreviewData(clone(data));\n                            }}\n                          >\n                            Preview\n                          </Button>\n                          <Button onClick={() => alert(JSON.stringify(data))}>\n                            Save\n                          </Button>\n                        </Space>\n                      </ToolBar>\n                    )}\n\n                    <WhiteContent style={contentStyle}>\n                      <DnDCell\n                        className={\"root\"}\n                        cellData={data}\n                        index={0}\n                        customCells={customCells}\n                      />\n                    </WhiteContent>\n                  </WhiteLayout>\n                </WhiteContent>\n                <WhiteSider width={280} style={rightSiderStyle}>\n                  {active ? (\n                    active.type === \"grid\" ? (\n                      <GridCellConfig data={active as LanedCellData} />\n                    ) : active.type === \"tab\" ? (\n                      <TabCellConfig data={active as TabCellData} />\n                    ) : active.type === \"datetime\" ? (\n                      <DateCellConfig data={active} />\n                    ) : active.type === \"select\" ? (\n                      <SelectCellConfig data={active as SelectCellData} />\n                    ) : active.type === \"checkbox\" ? (\n                      <CheckboxCellConfig data={active as SelectCellData} />\n                    ) : active.type === \"label\" ? (\n                      <LabelCellConfig data={active} />\n                    ) : active.type === \"input\" ? (\n                      <InputCellConfig data={active as InputCellData} />\n                    ) : (\n                      (customCells &&\n                        customCells.some((item) => item.type === active.type) &&\n                        customCells.filter(\n                          (item) => item.type === active.type\n                        )[0].config &&\n                        React.createElement(\n                          customCells.filter(\n                            (item) => item.type === active.type\n                          )[0].config!,\n                          {\n                            data: active,\n                            onChange: function (data: CellData) {\n                              designerDispatch({\n                                type: \"UPDATE\",\n                                data: data,\n                              });\n                            },\n                          }\n                        )) || <DefaultCellConfig data={active} />\n                    )\n                  ) : (\n                    <></>\n                  )}\n                </WhiteSider>\n              </FullHeightBorderedLayout>\n            </DndProvider>\n          </InteractContext.Provider>\n        </DesignerContext.Provider>\n        <Modal\n          width={1000}\n          title={\"Preview\"}\n          visible={previewDialogVisible}\n          onCancel={() => setPreviewDialogVisible(false)}\n          footer={[\n            <Button\n              key={\"save\"}\n              onClick={() => {\n                const result = previewRef.current!.getData();\n                alert(JSON.stringify(result));\n              }}\n            >\n              Save\n            </Button>,\n            <Button\n              key={\"validate\"}\n              onClick={() => previewRef.current.validate()}\n            >\n              Validate\n            </Button>,\n          ]}\n        >\n          {previewData && (\n            <Form\n              customCells={customCells}\n              ref={previewRef}\n              data={cloneAndForEach(previewData, (data) => {\n                data.value = data.defaultValue || data.value;\n              })}\n              key={previewData.id}\n            />\n          )}\n        </Modal>\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport \"./App.css\";\nimport { Designer } from \"./components/Form/Designer\";\n\nfunction App() {\n  return (\n    <>\n      <Designer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}