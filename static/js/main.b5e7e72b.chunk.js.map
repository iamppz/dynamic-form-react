{"version":3,"sources":["components/Form/util.ts","components/Form/Designer/util.tsx","components/Form/constants/WidgetGroups.tsx","components/Form/hooks/interactions.ts","components/Form/index.tsx","components/Form/Designer/FormGroup/index.tsx","components/Form/Designer/InputCell.tsx","components/Form/Designer/GridCell/Pool/Lane.tsx","components/Form/Designer/GridCell/Pool/DndLane.tsx","components/Form/Designer/GridCell/Pool/index.tsx","components/Form/Designer/GridCell/index.tsx","components/Form/Designer/SelectCell.tsx","components/Form/Designer/DateCell.tsx","components/Form/Designer/CheckboxCell.tsx","components/Form/Designer/LabelCell.tsx","components/Form/Designer/SwitchCell.tsx","components/Form/Designer/TabCell.tsx","components/Form/Designer/Cell.tsx","components/Form/Designer/DnDCell.tsx","components/Form/Designer/GridCellConfig/LaneConfig.tsx","components/Form/Designer/GridCellConfig/index.tsx","components/Form/Designer/DateCellConfig.tsx","components/Form/Designer/SelectCellConfig/OptionConfig.tsx","components/Form/Designer/SelectCellConfig/index.tsx","components/Form/Designer/Widget.tsx","components/Form/Designer/WidgetGroup.tsx","components/Form/Designer/CheckboxCellConfig.tsx","components/Form/Designer/LabelCellConfig.tsx","components/Form/Layout.tsx","components/Form/Designer/DefaultCellConfig.tsx","components/Form/Designer/TabCellConfig/TabConfig.tsx","components/Form/Designer/TabCellConfig/index.tsx","components/Form/Designer/index.tsx","App.js","serviceWorker.js","index.js"],"names":["InteractContext","React","createContext","set","root","id","key","value","strings","split","id1","func","data","lanes","lane","cellDataList","element","type","index","parseInt","id2","row","item","clone","src","copy","JSON","parse","stringify","forEach","dest","required","onChange","onClick","cloneAndForEach","handler","recursion","i","length","cellData","locate","matchFunc","location","parentId","laneIndex","indexOf","getCellDataList","list","drop","cell","dropItemId","position","dropLocation","dropList","splice","active","reducer","state","action","dragLocation","dragList","dragCell","dragItem","push","rootCellData","undefined","cellLocation","deleteActive","targetId","options","Array","warning","label","warnable","createWidgetInstance","Date","getTime","span","tabs","placeholder","WidgetGroups","name","widgets","icon","useInteractions","dispatch","setValue","useCallback","setOption","getValue","filter","fetchValue","InstanceContext","forwardRef","ref","customCells","useReducer","innerData","useImperativeHandle","getData","result","childLane","detail","listElement","hiddenValues","getValues","validate","constraintViolations","message","description","interactions","useUpdateEffect","Provider","Cell","className","FormGroup","layout","instanceDispatch","useContext","join","InputCell","labeled","title","disabled","event","target","Lane","direction","cells","useMemo","map","child","props","style","width","minHeight","height","DndLane","DesignerContext","useDrop","accept","monitor","isOver","getClientOffset","instance","find","customCell","collect","shallow","getItem","InstanceListHeaderItem","styled","Col","Pool","isDesigner","getLane","color","size","update","$push","$apply","x","y","GridCell","Option","Select","SelectCell","option","DateCell","moment","date","format","Group","checkedValues","LabelCell","padding","lineHeight","SwitchCell","checked","Tab","ActiveTab","Tabs","TabCell","designerDispatch","useState","findIndex","tabIndex","setTabIndex","handleSwitch","children","valueObject","command","unstagedValues","unstagedId","hasOwnProperty","unstagedValue","unstagedIds","values","CheckboxCell","some","createElement","DnDCell","useRef","dropClassName","setDropClassName","hover","current","hoverBoundingRect","getBoundingClientRect","coord","hoverMiddleY","bottom","top","hoverClientY","hoverMiddleX","right","left","hoverClientX","clientOffset","useDrag","isDragging","begin","drag","stopPropagation","opacity","zIndex","DeleteTwoTone","cursor","LaneConfig","move","onRemove","onResize","dragIndex","hoverIndex","margin","GridCellConfig","labelCol","Item","finalSpan","$set","$splice","from","to","Text","Typography","DateCellConfig","defaultValueOptions","text","currentDefaultValueOptions","setCurrentDefaultValueOptions","onSearch","searchText","search","RegExp","OptionConfig","SelectCellConfig","StyledLi","li","Widget","widget","listStyle","w","CheckboxCellConfig","LabelCellConfig","Header","Layout","Sider","Content","WhiteLayout","WhiteHeader","WhiteSider","WhiteContent","DefaultCellConfig","defaultValue","TabConfig","onRename","TabCellConfig","tab","LeftSider","attrs","FullHeightBorderedLayout","ToolBar","Designer","availableCustomCells","toolbar","defaultCellData","builtinCellDataTypes","previewDialogVisible","setPreviewDialogVisible","previewData","setPreviewData","previewRef","delFunction","keyCode","ctrlKey","finalAvailableCells","useEffect","document","addEventListener","removeEventListener","preview","reset","load","get","getActive","widgetGroups","group","DndProvider","backend","HTML5Backend","g","WidgetGroup","alert","borderLeft","config","visible","onCancel","footer","Form","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b5e7e72b.chunk.js","sourcesContent":["import { CellData } from \"./schema\";\nimport { forEach } from \"./Designer/util\";\nimport { CellDataType } from \"./type\";\nimport React from \"react\";\n\nexport const InteractContext = React.createContext<any>(null);\n\nexport function getValues(cell: CellData): any {\n  let result: any = {};\n  let func = function (data: CellData) {\n    if (data.lanes) {\n      data.lanes.forEach((lane) => {\n        lane.cellDataList.forEach((element) => {\n          switch (element.type) {\n            case \"grid\":\n              func(element);\n              break;\n            case \"list\":\n              result[element.id] = [];\n              element.lanes!.forEach((childLane) => {\n                let detail: { [key: string]: any } = {};\n                childLane.cellDataList.forEach((listElement: CellData) => {\n                  detail[listElement.id] = listElement.value;\n                });\n                detail = { ...detail, ...childLane.hiddenValues };\n                result[element.id].push(detail);\n              });\n              break;\n            default:\n              result[element.id] = element.value;\n              break;\n          }\n        });\n        result = { ...result, ...lane.hiddenValues };\n      });\n    }\n  };\n  func(cell);\n  return result;\n}\n\n/**\n * Get value from cell data by id\n * @param root: root cell data\n * @param id: e.g., name, details.0.name, details.name\n */\nexport function getValue(root: CellData, id: string): any | any[] {\n  let value: any = null;\n  const strings = id.split(\".\");\n  const id1 = strings[0];\n  let func = function (data: CellData) {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const element of lane.cellDataList) {\n          switch (element.type) {\n            case \"grid\":\n            case \"tab\":\n              func(element);\n              break;\n            default:\n              if (element.id === id1) {\n                if (element.type === \"list\") {\n                  if (strings.length === 3) {\n                    const index = parseInt(strings[1]);\n                    const id2 = strings[2];\n                    const row = element.lanes![index];\n                    for (let item of row.cellDataList) {\n                      if (item.id === id2) {\n                        value = item.value;\n                        return true;\n                      }\n                    }\n                  } else {\n                    value = [];\n                    const id2 = strings[1];\n                    for (const row of element.lanes!) {\n                      for (let item of row.cellDataList.filter(\n                        (item) => item.id === id2\n                      )) {\n                        value.push(item.value);\n                      }\n                    }\n                    return true;\n                  }\n                } else {\n                  value = element.value;\n                  return true;\n                }\n              }\n              break;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  func(root);\n  return value;\n}\n\nexport function set(root: CellData, id: string, key: string, value: any): void {\n  const strings = id.split(\".\");\n  const id1 = strings[0];\n  let func = function (data: CellData) {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const element of lane.cellDataList) {\n          switch (element.type) {\n            case \"grid\":\n            case \"tab\":\n              func(element);\n              break;\n            default:\n              if (element.id === id1) {\n                if (element.type === \"list\") {\n                  const index = parseInt(strings[1]);\n                  const id2 = strings[2];\n                  const row = element.lanes![index];\n                  for (let item of row.cellDataList) {\n                    if (item.id === id2) {\n                      item[key] = value;\n                      return true;\n                    }\n                  }\n                } else {\n                  element[key] = value;\n                  return true;\n                }\n              }\n              break;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  func(root);\n}\n\nfunction formatValue(value: any, type: CellDataType | string): any {\n  if (type === \"datetime\") {\n    return value.substr(0, 19).replace(\"T\", \" \");\n  } else {\n    return value;\n  }\n}\n\nexport function setData(root: CellData, form: any): void {\n  const master: any = { ...form };\n  root.lanes![0].hiddenValues = master;\n  for (let cellData of root.lanes![0].cellDataList) {\n    delete master[cellData.id];\n    forEach(cellData, (item) => {\n      const value = form[cellData.id];\n      if (item.type !== \"list\" && item.type !== \"grid\" && item.type !== \"tab\") {\n        cellData.value = value ? formatValue(value, cellData.type) : null;\n      } else if (item.type === \"list\" && value) {\n        for (const row of value) {\n          const detail: any = { ...row };\n          item.lanes?.push({\n            ...item.lanes[0],\n            cellDataList: item.lanes[0].cellDataList.map((x) => {\n              delete detail[x.id];\n              const y: CellData = {\n                ...x,\n              };\n              const value = row[x.id];\n              y.value = value ? formatValue(value, y.type) : null;\n              return y;\n            }),\n            hiddenValues: detail,\n          });\n        }\n        if (item.lanes!.length > 1) {\n          item.lanes?.splice(0, 1);\n        }\n      }\n    });\n  }\n}\n","import { CellData, CellLocation } from \"../schema\";\nimport { set } from \"../util\";\nimport { ReducerActionProps } from \"../type\";\n\nexport function clone(src: CellData): CellData {\n  const copy = JSON.parse(JSON.stringify(src));\n  forEach(src, (src) => {\n    forEach(copy, (dest) => {\n      if (dest.id === src.id) {\n        if (typeof src.required === \"function\") {\n          dest.required = src.required;\n        }\n        if (src.onChange) {\n          dest.onChange = src.onChange;\n        }\n        if (src.onClick) {\n          dest.onClick = src.onClick;\n        }\n      }\n    });\n  });\n  return copy;\n}\n\n/**\n * Clone and iterate nested CellData\n * @param root\n * @param handler\n */\nexport function cloneAndForEach(\n  root: CellData,\n  handler: (\n    value: CellData,\n    index: number | null,\n    array: CellData[] | null\n  ) => void\n): CellData {\n  const copy = clone(root);\n  forEach(copy, handler);\n  return copy;\n}\n\n/**\n * Iterate nested CellData\n * @param root\n * @param handler\n */\nexport function forEach(\n  root: CellData,\n  handler: (\n    value: CellData,\n    index: number | null,\n    array: CellData[] | null\n  ) => void\n): void {\n  let recursion = function (data: CellData): void {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (let i = 0; i < lane.cellDataList.length; i++) {\n          let cellData = lane.cellDataList[i];\n          handler(cellData, i, lane.cellDataList);\n          if (\n            cellData.type === \"grid\" ||\n            cellData.type === \"list\" ||\n            cellData.type === \"tab\"\n          ) {\n            recursion(cellData);\n          }\n        }\n      }\n    }\n  };\n  handler(root, null, null);\n  recursion(root);\n}\n\nexport function locate(\n  root: CellData,\n  matchFunc: (value: CellData, index: number, array: CellData[]) => boolean\n): [CellLocation, CellData[], CellData] | null {\n  let location: [CellLocation, CellData[], CellData] | null = null;\n  let func = function (\n    data: CellData\n  ): [CellLocation, CellData[], CellData] | null {\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (let i = 0; i < lane.cellDataList.length; i++) {\n          let cellData = lane.cellDataList[i];\n          if (matchFunc(cellData, i, lane.cellDataList)) {\n            location = [\n              {\n                parentId: data.id,\n                laneIndex: data.lanes?.indexOf(lane),\n                index: i,\n              },\n              lane.cellDataList,\n              cellData,\n            ];\n            break;\n          }\n          if (\n            cellData.type === \"grid\" ||\n            cellData.type === \"list\" ||\n            cellData.type === \"tab\"\n          ) {\n            func(cellData);\n          }\n        }\n      }\n    }\n    return location;\n  };\n  return func(root);\n}\n\nexport function deleteActive(rootCellData: CellData) {\n  const location = locate(\n    rootCellData,\n    (item) => item.active !== undefined && item.active\n  );\n  if (location) {\n    const [cellLocation, list] = location;\n    list.splice(cellLocation.index, 1);\n  }\n}\n\nexport function getCellDataList(\n  root: CellData,\n  parentId: string,\n  index: number\n): CellData[] | null {\n  let list: CellData[] | null = null;\n  let func = function (data: CellData) {\n    if (data.id === parentId) {\n      return data.lanes![index].cellDataList;\n    }\n    if (data.lanes) {\n      for (const lane of data.lanes) {\n        for (const cellData of lane.cellDataList) {\n          if (\n            cellData.type === \"grid\" ||\n            cellData.type === \"list\" ||\n            cellData.type === \"tab\"\n          ) {\n            if (cellData.id === parentId) {\n              list = cellData.lanes![index].cellDataList;\n            } else {\n              func(cellData);\n            }\n          }\n        }\n      }\n    }\n    return list;\n  };\n  return func(root);\n}\n\nfunction drop(\n  root: CellData,\n  cell: CellData,\n  dropItemId: string,\n  position: string\n) {\n  const [dropLocation, dropList] = locate(\n    root,\n    (item) => item.id === dropItemId\n  )!;\n  if (position === \"up\") {\n    dropList.splice(dropLocation.index, 0, cell);\n  } else {\n    dropList.splice(dropLocation.index + 1, 0, cell);\n  }\n  active(root, cell.id);\n}\nexport function reducer(state: any, action: ReducerActionProps): CellData {\n  if (!action.type) {\n    return state;\n  }\n  if (action.type === \"INIT\") {\n    return action.data;\n  }\n  const copy = clone(state);\n  if (action.type === \"POSITIONED_MOVE\") {\n    const [dragLocation, dragList, dragCell] = locate(\n      copy,\n      (item) => item.id === action.id\n    )!;\n    const location = locate(copy, (item) => item.id === action.dropItemId);\n    if (location) {\n      dragList.splice(dragLocation.index, 1);\n      drop(copy, dragCell, action.dropItemId, action.position);\n    }\n  } else if (action.type === \"POSITIONED_ADD\") {\n    const location = locate(copy, (item) => item.id === action.dropItemId);\n    if (location) {\n      drop(copy, action.dragItem, action.dropItemId, action.position);\n    }\n  } else if (action.type === \"ADD\") {\n    const cells = getCellDataList(\n      copy,\n      action.location.parentId,\n      action.location.index\n    )!;\n    cells.push(action.dragItem);\n    active(copy, action.dragItem.id);\n  } else if (action.type === \"UPDATE\") {\n    const [location, list] = locate(\n      copy,\n      (data) => data.id === action.data.id\n    )!;\n    list.splice(location.index, 1, action.data);\n  } else if (action.type === \"MOVE\") {\n    const [location, list, cell] = locate(\n      copy,\n      (item) => item.id === action.id\n    )!;\n    list.splice(location.index, 1);\n    const cellDataList = getCellDataList(\n      copy,\n      action.location.parentId,\n      action.location.index\n    );\n    cellDataList?.push(cell);\n    active(copy, cell.id);\n  } else if (action.type === \"DELETE\") {\n    const [location, list] = locate(copy, (item) => item.id === action.id)!;\n    list.splice(location.index, 1);\n  } else if (action.type === \"ACTIVE\") {\n    active(copy, action.id);\n  } else if (action.type === \"DELETE_ACTIVE\") {\n    deleteActive(copy);\n  } else if (action.type === \"SET\") {\n    set(copy, action.targetId, action.key, action.value);\n  } else if (action.type === \"SET_VALUE\") {\n    set(copy, action.targetId, \"value\", action.value);\n  } else if (action.type === \"SET_OPTION\") {\n    set(copy, action.targetId, \"options\", action.options);\n  } else if (action.type === \"VALIDATE\") {\n    return cloneAndForEach(state, function (cellData) {\n      if (\n        typeof cellData.required === \"function\"\n          ? !cellData.required()\n          : cellData.required &&\n            (!cellData.value ||\n              (cellData.value instanceof Array && cellData.value.length === 0))\n      ) {\n        cellData.warning = `${cellData.label} is required.`;\n        cellData.warnable = true;\n      } else {\n        cellData.warnable = false;\n        cellData.warning = \"\";\n      }\n    });\n  }\n  return copy;\n}\n\nexport function getActive(root: CellData): CellData | null {\n  const location = locate(\n    root,\n    (item) => item.active !== undefined && item.active\n  );\n  return location ? location[2] : null;\n}\n\nexport function active(root: CellData, id: string) {\n  forEach(root, function (cellData) {\n    cellData.active = id === cellData.id;\n  });\n}\n\nexport function createWidgetInstance(type: string): CellData {\n  let cellData: CellData = {\n    type: type,\n    id: type + new Date().getTime(),\n    active: false,\n    label: type,\n  };\n  if (cellData.type === \"grid\") {\n    cellData.lanes = [\n      { span: 12, cellDataList: [] },\n      { span: 12, cellDataList: [] },\n    ];\n  } else if (cellData.type === \"tab\") {\n    cellData.lanes = [\n      { span: 24, cellDataList: [] },\n      { span: 0, cellDataList: [] },\n    ];\n    cellData.tabs = [\"选项卡1\", \"选项卡2\"];\n  } else if (cellData.type === \"input\") {\n    cellData.label = \"单行文本\";\n    cellData.placeholder = \"请填写\";\n    cellData.required = false;\n  } else if (cellData.type === \"select\") {\n    cellData.label = \"下拉选择\";\n    cellData.placeholder = \"请选择\";\n    cellData.options = [];\n    cellData.required = false;\n  } else if (cellData.type === \"list\") {\n    cellData.label = \"列表\";\n    cellData.lanes = [{ cellDataList: [], span: 100 }];\n  } else if (cellData.type === \"datetime\") {\n    cellData.label = \"日期时间\";\n    cellData.placeholder = \"请选择\";\n    cellData.required = false;\n  } else if (cellData.type === \"checkbox\") {\n    cellData.label = \"多选\";\n    cellData.options = [];\n    cellData.required = false;\n  } else if (cellData.type === \"radio\") {\n    cellData.label = \"单选\";\n    cellData.options = [];\n    cellData.required = false;\n  }\n  return cellData;\n}\n","import {\n  AiOutlineCalendar,\n  AiOutlineCheckSquare,\n  AiOutlineDownSquare,\n  AiOutlineEdit,\n  AiOutlineFontSize,\n  AiOutlineOrderedList,\n  AiOutlineTable,\n} from \"react-icons/ai\";\nimport React from \"react\";\nimport { WidgetData } from \"../schema\";\n\nexport const WidgetGroups: { name: string; widgets: WidgetData[] }[] = [\n  {\n    name: \"基础字段\",\n    widgets: [\n      {\n        type: \"input\",\n        icon: <AiOutlineEdit />,\n        name: \"单行文本\",\n      },\n      {\n        type: \"textarea\",\n        icon: <AiOutlineEdit />,\n        name: \"多行文本\",\n      },\n      {\n        type: \"select\",\n        icon: <AiOutlineDownSquare />,\n        name: \"下拉选择\",\n      },\n      {\n        type: \"datetime\",\n        icon: <AiOutlineCalendar />,\n        name: \"日期时间\",\n      },\n      {\n        type: \"checkbox\",\n        icon: <AiOutlineCheckSquare />,\n        name: \"多选\",\n      },\n      {\n        type: \"label\",\n        icon: <AiOutlineFontSize />,\n        name: \"文本\",\n      },\n    ],\n  },\n  {\n    name: \"高级字段\",\n    widgets: [\n      { type: \"grid\", icon: <AiOutlineTable />, name: \"布局\" },\n      { type: \"tab\", icon: <AiOutlineTable />, name: \"选项卡\" },\n      {\n        type: \"list\",\n        icon: <AiOutlineOrderedList />,\n        name: \"列表\",\n      },\n    ],\n  },\n];\n","import React, { useCallback } from \"react\";\nimport { ReducerActionProps } from \"../type\";\nimport { CellData } from \"../schema\";\nimport { getValue as fetchValue } from \"../util\";\n\nexport interface Interactions {\n  setValue: (id: string, value: any) => void;\n  setOption: (id: string, options: { value: any; label: string }[]) => void;\n  getValue: (id: string) => any;\n  set: (id: string, key: string, value: any) => void;\n}\n\nexport default function useInteractions(\n  dispatch: React.Dispatch<ReducerActionProps>,\n  root: CellData\n): Interactions {\n  const setValue = useCallback(\n    (id: string, value: any) => {\n      dispatch({\n        type: \"SET_VALUE\",\n        targetId: id,\n        value,\n      });\n    },\n    [dispatch]\n  );\n  const setOption = useCallback(\n    (id: string, options: { value: any; label: string }[]) => {\n      dispatch({\n        type: \"SET_OPTION\",\n        options: options,\n        targetId: id,\n      });\n    },\n    [dispatch]\n  );\n  const getValue = useCallback(\n    (id: string): any => {\n      return fetchValue(root, id);\n    },\n    [root]\n  );\n  const set = useCallback(\n    (id: string, key: string, value: any) => {\n      dispatch({\n        type: \"SET\",\n        targetId: id,\n        key,\n        value,\n      });\n    },\n    [dispatch]\n  );\n  return { setValue, setOption, getValue, set };\n}\n","import React, { forwardRef, useImperativeHandle, useReducer } from \"react\";\nimport { Cell, CustomCell } from \"./Designer/Cell\";\nimport { forEach, reducer } from \"./Designer/util\";\nimport { CellData, ConstrainViolation } from \"./schema\";\nimport { getValues, InteractContext } from \"./util\";\nimport { useUpdateEffect } from \"react-use\";\nimport useInteractions from \"./hooks/interactions\";\n\nexport interface InstanceProps {\n  data: CellData;\n  customCells?: CustomCell[];\n}\n\n/**\n * Instance context provides the same utilities with designer context,\n * but also allows user's input\n */\nexport const InstanceContext = React.createContext<any>(null);\nexport default forwardRef(({ data, customCells }: InstanceProps, ref: any) => {\n  const [innerData, dispatch] = useReducer(reducer, data);\n  useImperativeHandle(ref, () => ({\n    getData: function () {\n      return getValues(innerData);\n    },\n    validate: function (): ConstrainViolation[] {\n      dispatch({\n        type: \"VALIDATE\",\n      });\n      const constraintViolations: ConstrainViolation[] = [];\n      forEach(innerData, function (cellData) {\n        if (cellData.required && !cellData.value) {\n          constraintViolations.push({\n            id: cellData.id,\n            message: `${cellData.label}不能为空`,\n            value: cellData.value,\n            description: \"required\",\n          });\n        }\n      });\n      return constraintViolations;\n    },\n  }));\n  const interactions = useInteractions(dispatch, innerData);\n  useUpdateEffect(() => {\n    dispatch({ type: \"INIT\", data });\n  }, [data]);\n  return (\n    <InstanceContext.Provider value={dispatch}>\n      <InteractContext.Provider value={interactions}>\n        <Cell\n          ref={ref}\n          cellData={innerData}\n          className={\"preview\"}\n          customCells={customCells}\n        />\n      </InteractContext.Provider>\n    </InstanceContext.Provider>\n  );\n});\n","import React, { forwardRef, useContext } from \"react\";\nimport \"./index.css\";\nimport { InstanceContext } from \"../../index\";\n\ninterface FormGroupProps {\n  layout?: \"vertical\" | \"horizontal\";\n  required?: boolean;\n  warning?: string | null;\n  warnable?: boolean;\n  label?: JSX.Element | null;\n  element: JSX.Element | null;\n}\n\nexport const FormGroup = forwardRef(\n  (\n    {\n      layout = \"horizontal\",\n      required = false,\n      warning = null,\n      warnable = true,\n      label = <></>,\n      element,\n    }: FormGroupProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    return (\n      <table ref={ref} className={[\"form-group\", layout].join(\" \")}>\n        <tbody>\n          {layout === \"horizontal\" ? (\n            <>\n              <tr>\n                <td className={\"label\"}>\n                  {required ? <span className={\"required\"}>*</span> : <></>}\n                  {label}\n                </td>\n                <td className={\"element\"}>{element}</td>\n              </tr>\n              {warnable ? (\n                <tr>\n                  <td />\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          ) : (\n            <>\n              {!instanceDispatch && (\n                <tr>\n                  <td className={\"label\"}>\n                    {required ? <span className={\"required\"}>*</span> : <></>}\n                    {label}\n                  </td>\n                </tr>\n              )}\n              <tr>\n                <td className={\"element\"}>{element}</td>\n              </tr>\n              {warnable ? (\n                <tr>\n                  <td className={\"warning\"}>\n                    {warning ? <span>{warning}</span> : <span>&nbsp;</span>}\n                  </td>\n                </tr>\n              ) : (\n                <></>\n              )}\n            </>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { Input } from \"antd\";\nimport { CellProps } from \"../schema\";\nimport { FormGroup } from \"./FormGroup\";\n\nexport const InputCell = forwardRef(\n  ({ data, layout, onChange }: CellProps, ref: any) => {\n    return (\n      <>\n        <FormGroup\n          ref={ref}\n          required={typeof data.required === \"function\" ? true : data.required}\n          warning={data.warning}\n          layout={layout}\n          warnable={data.warnable!}\n          label={\n            data.labeled ? (\n              <label title={data.label}>{data.label}</label>\n            ) : (\n              <></>\n            )\n          }\n          element={\n            <Input\n              disabled={data.disabled}\n              value={data.value}\n              placeholder={data.placeholder}\n              onChange={(event) => {\n                onChange(event.target.value);\n              }}\n            />\n          }\n        />\n      </>\n    );\n  }\n);\n","import React, { forwardRef, useContext, useMemo } from \"react\";\nimport { CellData, SwimlaneLocation } from \"../../../schema\";\nimport { DnDCell } from \"../../DnDCell\";\nimport { Cell, CustomCell } from \"../../Cell\";\nimport { InstanceContext } from \"../../../index\";\nimport { Col } from \"antd\";\n\ninterface LaneProps {\n  cellDataList: CellData[];\n  direction: \"horizontal\" | \"vertical\";\n  className?: string;\n  span?: number;\n  customCells?: CustomCell[];\n  location: SwimlaneLocation;\n}\n\nexport const Lane = forwardRef(\n  (\n    {\n      cellDataList,\n      direction,\n      className,\n      span = 24,\n      customCells,\n      location,\n    }: LaneProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    const cells = useMemo(() => {\n      return cellDataList.map((child, index) => {\n        const props = {\n          location,\n          key: child.id,\n          layout: direction,\n          cellData: child,\n          customCells,\n          style: {\n            width: child.width,\n          },\n        };\n        return instanceDispatch === null ? (\n          <DnDCell {...props} index={index} />\n        ) : (\n          <Cell {...props} />\n        );\n      });\n    }, [cellDataList, customCells, direction, instanceDispatch, location]);\n\n    return (\n      <Col span={span} className={`lane ${direction}${className || \"\"}`}>\n        <div style={{ width: \"100%\", minHeight: 42, height: \"100%\" }} ref={ref}>\n          {cells}\n        </div>\n      </Col>\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { Lane } from \"./Lane\";\nimport { CellData } from \"../../../schema\";\nimport { SwimlaneLocation } from \"../../../schema/\";\nimport { DesignerContext } from \"../../index\";\nimport { createWidgetInstance } from \"../../util\";\nimport { CustomCell } from \"../../Cell\";\n\ninterface LaneProps {\n  cellDataList: CellData[];\n  direction: \"horizontal\" | \"vertical\";\n  location: SwimlaneLocation;\n  span?: number;\n  customCells?: CustomCell[];\n}\n\nexport const DndLane = function ({\n  cellDataList,\n  direction,\n  location,\n  span = 24,\n  customCells,\n}: LaneProps) {\n  const dispatch = useContext(DesignerContext);\n  const [{ isOver }, drop] = useDrop({\n    accept: [\n      \"input\",\n      \"grid\",\n      \"textarea\",\n      \"select\",\n      \"datetime\",\n      \"checkbox\",\n      \"list\",\n      \"instance\",\n      \"label\",\n      \"tab\",\n      ...(customCells || []).map((item) => item.type),\n    ],\n    drop: (item: any, monitor) => {\n      if (isOver) {\n        const clientOffset = monitor.getClientOffset();\n        if (!clientOffset) {\n          return;\n        }\n\n        if (item.type === \"instance\") {\n          dispatch({\n            type: \"MOVE\",\n            id: item.id,\n            location: location,\n          });\n        } else {\n          let instance: CellData | null = null;\n          if (customCells) {\n            const find = customCells.find(\n              (customCell) => customCell.type === item.type\n            );\n            if (find && find.createWidgetInstance) {\n              instance = find.createWidgetInstance();\n            }\n          }\n          if (!instance) {\n            instance = createWidgetInstance(item.type as string);\n          }\n          dispatch({\n            type: \"ADD\",\n            dragItem: instance!,\n            location: location,\n          });\n        }\n      }\n    },\n    collect: (monitor) => {\n      let isOver = monitor.isOver({ shallow: true });\n      if (isOver && monitor.getItem().id === location.parentId) {\n        isOver = false;\n      }\n      return { isOver: isOver };\n    },\n  });\n  return (\n    <Lane\n      location={location}\n      span={span}\n      cellDataList={cellDataList}\n      className={isOver ? \" hovered\" : \"\"}\n      ref={drop}\n      direction={direction}\n      customCells={customCells}\n    />\n  );\n};\n","import React, { forwardRef, useCallback, useContext, useMemo } from \"react\";\nimport { Button, Col, Row } from \"antd\";\nimport styled from \"styled-components\";\nimport update from \"immutability-helper\";\nimport { CellData, LaneData } from \"../../../schema\";\nimport { InstanceContext } from \"../../../index\";\nimport { DndLane } from \"./DndLane\";\nimport { Lane } from \"./Lane\";\nimport \"./index.css\";\nimport { CustomCell } from \"../../Cell\";\nimport { FormGroup } from \"../../FormGroup\";\n\ninterface PoolProps {\n  direction?: \"horizontal\" | \"vertical\";\n  cellData: CellData;\n  customCells?: CustomCell[];\n}\n\nconst InstanceListHeaderItem = styled(Col)`\n  padding: 0 10px;\n  white-space: nowrap;\n  width: 100%;\n  overflow-x: auto;\n\n  > div {\n    width: 200px;\n    display: inline-block;\n  }\n`;\n\nexport const Pool = forwardRef(\n  (\n    { direction = \"horizontal\", cellData, customCells }: PoolProps,\n    ref: any\n  ) => {\n    const instanceDispatch = useContext(InstanceContext);\n    const isDesigner = instanceDispatch === null;\n    const getLane = useCallback(\n      (lane: LaneData, index: number) => {\n        const props = {\n          key: `${cellData.id}-${index}`,\n          direction: direction,\n          cellDataList: lane.cellDataList,\n          location: {\n            parentId: cellData.id,\n            index: index,\n          },\n          span: lane.span,\n          customCells: customCells,\n        };\n        return isDesigner ? <DndLane {...props} /> : <Lane {...props} />;\n      },\n      [cellData.id, customCells, direction, isDesigner]\n    );\n    const lanes = useMemo(\n      () => cellData.lanes!.map((lane, index) => getLane(lane, index)),\n      [cellData.lanes, getLane]\n    );\n\n    return (\n      <>\n        <Row ref={ref} className={\"lanes\"}>\n          {direction === \"horizontal\" ? (\n            <>{lanes}</>\n          ) : (\n            <FormGroup\n              required={!!cellData.required}\n              warning={cellData.warning}\n              warnable={cellData.warnable!}\n              element={\n                <>\n                  {!isDesigner && (\n                    <InstanceListHeaderItem span={24}>\n                      {cellData.lanes![0].cellDataList.map((item) => (\n                        <div style={{ width: item.width }}>\n                          {item.required && (\n                            <span style={{ color: \"red\" }}>*</span>\n                          )}\n                          <span>{item.label}</span>\n                        </div>\n                      ))}\n                    </InstanceListHeaderItem>\n                  )}\n                  {lanes}\n                  {!isDesigner && direction === \"vertical\" && (\n                    <Button\n                      size={\"small\"}\n                      onClick={() =>\n                        instanceDispatch({\n                          type: \"UPDATE\",\n                          data: update(cellData, {\n                            lanes: {\n                              $push: [\n                                update(cellData.lanes![0], {\n                                  cellDataList: {\n                                    $apply: (x: CellData[]) =>\n                                      x.map((y) => ({\n                                        ...y,\n                                        value: null,\n                                      })),\n                                  },\n                                  hiddenValues: {\n                                    $apply: () => ({}),\n                                  },\n                                }),\n                              ],\n                            },\n                          }),\n                        })\n                      }\n                      type={\"link\"}\n                    >\n                      Add\n                    </Button>\n                  )}\n                </>\n              }\n              label={<span>{cellData.label}</span>}\n            />\n          )}\n        </Row>\n      </>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { Pool } from \"./Pool\";\nimport { CellData } from \"../../schema\";\nimport { CustomCell } from \"../Cell\";\n\ninterface GridCellProps {\n  data: CellData;\n  direction?: \"horizontal\" | \"vertical\";\n  customCells?: CustomCell[];\n}\n\nexport const GridCell = forwardRef(\n  ({ data, direction, customCells }: GridCellProps, ref: any) => {\n    return (\n      <>\n        <Pool\n          ref={ref}\n          cellData={data}\n          direction={direction}\n          customCells={customCells}\n        />\n      </>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { Select } from \"antd\";\nimport { FormGroup } from \"./FormGroup\";\nimport { CellProps } from \"../schema\";\n\nconst { Option } = Select;\n\nexport const SelectCell = forwardRef(\n  ({ data, layout, onChange }: CellProps, ref: any) => {\n    return (\n      <>\n        <FormGroup\n          ref={ref}\n          required={!!data.required!}\n          warning={data.warning}\n          layout={layout}\n          warnable={data.warnable!}\n          label={\n            data.labeled ? (\n              <label title={data.label}>{data.label}</label>\n            ) : (\n              <></>\n            )\n          }\n          element={\n            <Select\n              placeholder={data.placeholder}\n              disabled={data.disabled}\n              style={{ width: \"100%\" }}\n              onChange={(value) => onChange(value)}\n            >\n              {data.options?.map((option) => (\n                <Option key={option.value} value={option.value}>\n                  {option.label}\n                </Option>\n              ))}\n            </Select>\n          }\n        />\n      </>\n    );\n  }\n);\n","import React, { forwardRef } from \"react\";\nimport { DatePicker } from \"antd\";\nimport { FormGroup } from \"./FormGroup\";\nimport { CellProps } from \"../schema\";\nimport moment from \"moment\";\n\nexport const DateCell = forwardRef(\n  ({ data, layout, onChange }: CellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={!!data.required}\n        warning={data.warning}\n        layout={layout}\n        warnable={data.warnable!}\n        label={\n          data.labeled ? <label title={data.label}>{data.label}</label> : <></>\n        }\n        element={\n          <DatePicker\n            style={{ width: \"100%\" }}\n            disabled={data.disabled}\n            value={data.value ? moment(data.value) : null}\n            placeholder={data.placeholder}\n            onChange={(date) =>\n              onChange(date ? date.format(\"YYYY-MM-DD HH:mm:ss\") : null)\n            }\n          />\n        }\n      />\n    </>\n  )\n);\n","import React from \"react\";\nimport { CellProps } from \"../schema\";\nimport { FormGroup } from \"./FormGroup\";\nimport { Checkbox } from \"antd\";\n\nexport default function ({ data, layout, onChange }: CellProps) {\n  return (\n    <>\n      <FormGroup\n        layout={layout}\n        required={!!data.required}\n        warnable={data.warnable}\n        label={<label>{data.label}</label>}\n        element={\n          <>\n            <Checkbox.Group\n              options={data.options}\n              onChange={(checkedValues) => onChange(checkedValues)}\n            />\n          </>\n        }\n      />\n    </>\n  );\n}\n","import React, { forwardRef } from \"react\";\nimport { CellProps } from \"../schema\";\n\nexport const LabelCell = forwardRef(({ data }: CellProps, ref: any) => (\n  <div style={{ height: 42, padding: \"0 10px\" }} ref={ref}>\n    <label style={{ lineHeight: \"42px\" }} title={data.label}>\n      {data.label || \" \"}\n    </label>\n  </div>\n));\n","import React, { forwardRef } from \"react\";\nimport { Switch } from \"antd\";\nimport { CellProps } from \"../schema\";\nimport { FormGroup } from \"./FormGroup\";\n\nexport const SwitchCell = forwardRef(\n  ({ data, layout, onChange }: CellProps, ref: any) => (\n    <>\n      <FormGroup\n        ref={ref}\n        required={typeof data.required === \"function\" ? true : data.required}\n        warning={data.warning}\n        layout={layout}\n        warnable={data.warnable!}\n        label={\n          data.labeled ? <label title={data.label}>{data.label}</label> : <></>\n        }\n        element={\n          <Switch\n            checked={data.value}\n            onChange={(checked) => onChange(checked)}\n            disabled={data.disabled}\n          />\n        }\n      />\n    </>\n  )\n);\n","import React, { forwardRef, useCallback, useContext, useState } from \"react\";\nimport { CellData, LaneData } from \"../schema\";\nimport { Pool } from \"./GridCell/Pool\";\nimport { CustomCell } from \"./Cell\";\nimport styled from \"styled-components\";\nimport { DesignerContext } from \"./index\";\nimport update from \"immutability-helper\";\nimport { InstanceContext } from \"../index\";\n\ninterface TabCellProps {\n  data: CellData;\n  customCells?: CustomCell[];\n}\n\nconst Tab = styled(\"div\")`\n  display: inline-block;\n  padding: 10px 20px;\n  font-weight: bold;\n  min-width: 40px;\n  text-align: center;\n  cursor: pointer;\n`;\nconst ActiveTab = styled(Tab)`\n  border-bottom: 2px solid #1890ff;\n  color: #1890ff;\n`;\nconst Tabs = styled(\"div\")`\n  border-bottom: 1px solid #d3d3d3;\n`;\n\nexport const TabCell = forwardRef(\n  ({ data, customCells }: TabCellProps, ref: any) => {\n    const designerDispatch = useContext(DesignerContext);\n    const instanceDispatch = useContext(InstanceContext);\n    const isDesigner = instanceDispatch === null;\n    const dispatch = !isDesigner ? instanceDispatch : designerDispatch;\n    const [tabIndex, setTabIndex] = useState<number>(\n      data.lanes!.findIndex((item) => item.span === 24)\n    );\n    const handleSwitch = useCallback(\n      (index) => {\n        setTabIndex(index);\n        dispatch({\n          type: \"UPDATE\",\n          data: update(data, {\n            lanes: {\n              $apply: (x: LaneData[] | undefined): LaneData[] =>\n                (x || []).map((y) => ({\n                  ...y,\n                  span: data.lanes?.indexOf(y) === index ? 24 : 0,\n                })),\n            },\n          }),\n        });\n      },\n      [data, dispatch]\n    );\n    return (\n      <>\n        <Tabs>\n          {data.lanes?.map((lane, index) => {\n            if (index === tabIndex) {\n              return <ActiveTab>{data.tabs![index]}</ActiveTab>;\n            }\n            return (\n              <Tab onClick={() => handleSwitch(index)}>{data.tabs![index]}</Tab>\n            );\n          })}\n        </Tabs>\n        <Pool cellData={data} customCells={customCells} />\n      </>\n    );\n  }\n);\n","import React, {\n  CSSProperties,\n  forwardRef,\n  FunctionComponent,\n  useCallback,\n  useContext,\n  useMemo,\n} from \"react\";\nimport {\n  CellData,\n  CellProps as ActualCellProps,\n  SwimlaneLocation,\n} from \"../schema\";\nimport { InputCell } from \"./InputCell\";\nimport { GridCell } from \"./GridCell\";\nimport { SelectCell } from \"./SelectCell\";\nimport { DateCell } from \"./DateCell\";\nimport { InstanceContext } from \"../index\";\nimport CheckboxCell from \"./CheckboxCell\";\nimport { LabelCell } from \"./LabelCell\";\nimport { SwitchCell } from \"./SwitchCell\";\nimport { Interactions } from \"../hooks/interactions\";\nimport { InteractContext } from \"../util\";\nimport { TabCell } from \"./TabCell\";\nimport { DesignerContext } from \"./index\";\nimport { DispatchSetValueProps } from \"../schema/ReducerAction\";\n\nexport interface CustomCell {\n  type: string;\n  cell: FunctionComponent<ActualCellProps>;\n  config?: FunctionComponent<{\n    data: CellData;\n    onChange: (data: CellData) => void;\n  }>;\n  icon?: JSX.Element;\n  name?: string;\n  createWidgetInstance?: () => CellData;\n}\ninterface CellProps {\n  cellData: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  style?: CSSProperties;\n  onClick?: (event: any) => void;\n  className?: string;\n  customCells?: CustomCell[];\n  children?: JSX.Element;\n  location?: SwimlaneLocation;\n}\nexport const Cell = forwardRef(\n  (\n    {\n      cellData,\n      layout = \"horizontal\",\n      style,\n      onClick,\n      className,\n      customCells,\n      children,\n      location,\n    }: CellProps,\n    ref: any\n  ) => {\n    // todo: should prevent from remove required cell\n\n    const instanceDispatch = useContext(InstanceContext);\n    const designerDispatch = useContext(DesignerContext);\n    const data = useMemo(\n      () => ({\n        required: false,\n        warnable: false,\n        layout: \"default\",\n        labeled: true,\n        ...cellData,\n      }),\n      [cellData]\n    );\n    const interactions = useContext<Interactions>(InteractContext);\n    const onChange = useCallback(\n      (value: any, valueObject: any) => {\n        const targetId =\n          location && layout === \"vertical\"\n            ? `${location.parentId}.${location.index}.${data.id}`\n            : data.id;\n        const command: DispatchSetValueProps = {\n          type: \"SET_VALUE\",\n          targetId,\n          value: value,\n        };\n        if (instanceDispatch) {\n          instanceDispatch(command);\n        } else {\n          designerDispatch(command);\n        }\n\n        const unstagedValues: any = {};\n        data.onChange?.(\n          value,\n          {\n            ...interactions,\n            /**\n             * Wrapper to replace the result of default getValue with unstaged values\n             * @param id: e.g., name, details.0.name, details.name\n             */\n            getValue(id: string): any | any[] {\n              for (const unstagedId in unstagedValues) {\n                if (!unstagedValues.hasOwnProperty(unstagedId)) {\n                  continue;\n                }\n\n                const unstagedValue = unstagedValues[unstagedId];\n\n                if (id === unstagedId) {\n                  return unstagedValue;\n                }\n\n                const unstagedIds = unstagedId.split(\".\");\n\n                if (\n                  unstagedIds.length === 3 &&\n                  id === `${unstagedIds[0]}.${unstagedIds[2]}`\n                ) {\n                  const values = interactions.getValue(id);\n                  // replace stage value with unstaged value\n                  values.splice(parseInt(unstagedIds[1]), 1, unstagedValue);\n                  return values;\n                }\n              }\n              return interactions.getValue(id);\n            },\n            /**\n             * Wrapper to save value to unstaged values\n             * @param id: e.g., name, details.0.name, details.name\n             * @param value: value of component\n             */\n            setValue(id: string, value: any): void {\n              unstagedValues[id] = value;\n              interactions.setValue(id, value);\n            },\n          },\n          valueObject,\n          location\n        );\n      },\n      [\n        data.id,\n        data.onChange,\n        designerDispatch,\n        instanceDispatch,\n        interactions,\n        layout,\n        location,\n      ]\n    );\n    const props = useMemo(\n      () => ({\n        onChange,\n        data,\n        layout,\n      }),\n      [data, layout, onChange]\n    );\n    return (\n      <>\n        <div\n          ref={ref}\n          style={{ ...style, position: \"relative\" }}\n          className={`instance ${\n            !instanceDispatch && data.active ? \" active \" : \" \"\n          }${className || \"\"}`}\n          onClick={onClick}\n        >\n          {children}\n          {data.type === \"input\" ? (\n            <InputCell {...props} />\n          ) : data.type === \"grid\" ? (\n            <GridCell data={data} customCells={customCells} />\n          ) : data.type === \"list\" ? (\n            <GridCell\n              data={data}\n              direction={\"vertical\"}\n              customCells={customCells}\n            />\n          ) : data.type === \"select\" ? (\n            <SelectCell {...props} />\n          ) : data.type === \"datetime\" ? (\n            <DateCell {...props} />\n          ) : data.type === \"checkbox\" ? (\n            <CheckboxCell {...props} />\n          ) : data.type === \"label\" ? (\n            <LabelCell {...props} />\n          ) : data.type === \"switch\" ? (\n            <SwitchCell {...props} />\n          ) : data.type === \"tab\" ? (\n            <TabCell {...props} customCells={customCells} />\n          ) : (\n            (customCells &&\n              customCells.some((item) => item.type === data.type) &&\n              React.createElement(\n                customCells.filter((item) => item.type === data.type)[0].cell,\n                props\n              )) || (\n              <>\n                <span>{`Not found: ${data.type} of ${customCells\n                  ?.map((item) => item.type)\n                  .join(\", \")}`}</span>\n              </>\n            )\n          )}\n        </div>\n      </>\n    );\n  }\n);\n","import React, { CSSProperties, useContext, useRef, useState } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { CellData, SwimlaneLocation } from \"../schema\";\nimport { DesignerContext } from \"./index\";\nimport { createWidgetInstance } from \"./util\";\nimport { Cell, CustomCell } from \"./Cell\";\nimport { DeleteTwoTone } from \"@ant-design/icons\";\n\ninterface DnDCellProps {\n  cellData: CellData;\n  layout?: \"vertical\" | \"horizontal\";\n  index: number;\n  className?: string;\n  customCells?: CustomCell[];\n  location?: SwimlaneLocation;\n  style?: CSSProperties;\n}\n\ninterface DragItem {\n  index: number;\n  id: string;\n  type: string;\n}\n\nexport const DnDCell = function ({\n  cellData,\n  index,\n  layout = \"horizontal\",\n  className,\n  customCells,\n  location,\n  style,\n}: DnDCellProps) {\n  const data = {\n    required: false,\n    warnable: false,\n    layout: \"default\",\n    labeled: true,\n    ...cellData,\n  };\n  const ref = useRef<any>(null);\n  const designerDispatch = useContext(DesignerContext);\n  const [dropClassName, setDropClassName] = useState<\n    | \"\"\n    | \" drop-over-leftward\"\n    | \" drop-over-rightward\"\n    | \" drop-over-upward\"\n    | \" drop-over-downward\"\n  >(\"\");\n  const [{ isOver }, drop] = useDrop({\n    accept: [\n      \"instance\",\n      \"input\",\n      \"textarea\",\n      \"select\",\n      \"checkbox\",\n      \"datetime\",\n      \"grid\",\n      \"list\",\n      \"label\",\n      \"tab\",\n      ...(customCells || []).map((item) => item.type),\n    ],\n    hover: (item: DragItem, monitor) => {\n      if (\n        !ref.current ||\n        !monitor.isOver({ shallow: true }) ||\n        monitor.getItem().id === cellData.id ||\n        !monitor.getClientOffset()\n      ) {\n        setDropClassName(\"\");\n        return;\n      }\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n      const clientOffset = monitor.getClientOffset();\n      const coord = clientOffset as XYCoord;\n      if (layout === \"horizontal\") {\n        const hoverMiddleY =\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n        const hoverClientY = coord.y - hoverBoundingRect.top;\n        setDropClassName(\n          hoverClientY > hoverMiddleY\n            ? \" drop-over-downward\"\n            : \" drop-over-upward\"\n        );\n      } else {\n        const hoverMiddleX =\n          (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n        const hoverClientX = coord.x - hoverBoundingRect.left;\n        setDropClassName(\n          hoverClientX > hoverMiddleX\n            ? \" drop-over-rightward\"\n            : \" drop-over-leftward\"\n        );\n      }\n    },\n    collect: (monitor) => {\n      return {\n        isOver: monitor.isOver({ shallow: true }),\n      };\n    },\n    drop(item: DragItem, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      if (!monitor.isOver({ shallow: true })) {\n        return;\n      }\n\n      let position: \"up\" | \"down\";\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n      const clientOffset = monitor.getClientOffset();\n      if (!clientOffset) {\n        return;\n      }\n      if (layout === \"horizontal\") {\n        const hoverMiddleY =\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n        const hoverClientY =\n          (clientOffset as XYCoord).y - hoverBoundingRect.top;\n        position = hoverClientY > hoverMiddleY ? \"down\" : \"up\";\n      } else {\n        const hoverMiddleX =\n          (hoverBoundingRect.right - hoverBoundingRect.left) / 2;\n        const hoverClientX =\n          (clientOffset as XYCoord).x - hoverBoundingRect.left;\n        position = hoverClientX > hoverMiddleX ? \"down\" : \"up\";\n      }\n\n      if (item.type === \"instance\") {\n        designerDispatch({\n          type: \"POSITIONED_MOVE\",\n          id: monitor.getItem().id,\n          position: position,\n          dropItemId: cellData.id,\n        });\n      } else {\n        let instance: CellData | null = null;\n        if (customCells) {\n          const find = customCells.find(\n            (customCell) => customCell.type === item.type\n          );\n          if (find && find.createWidgetInstance) {\n            instance = find.createWidgetInstance();\n          }\n        }\n        if (!instance) {\n          instance = createWidgetInstance(item.type as string);\n        }\n        designerDispatch({\n          type: \"POSITIONED_ADD\",\n          position: position,\n          dropItemId: cellData.id,\n          dragItem: instance,\n        });\n      }\n    },\n  });\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: \"instance\", id: cellData.id, index },\n    collect: (monitor: any) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n    begin: () => {\n      designerDispatch({\n        type: \"ACTIVE\",\n        id: cellData.id,\n      });\n    },\n  });\n  drag(drop(ref));\n\n  return (\n    <>\n      <Cell\n        location={location}\n        customCells={customCells}\n        className={`${isOver ? dropClassName : \"\"} ${className || \"\"}`}\n        onClick={(event) => {\n          event.stopPropagation();\n          designerDispatch({\n            type: \"ACTIVE\",\n            id: cellData.id,\n          });\n          designerDispatch({\n            type: \"EDIT\",\n            id: cellData.id,\n          });\n        }}\n        ref={ref}\n        style={{ opacity: isDragging ? \"0.5\" : 1, ...style }}\n        cellData={data}\n        layout={layout}\n      >\n        {data.active ? (\n          <div\n            style={{ position: \"absolute\", top: 0, right: \"4px\", zIndex: 1 }}\n          >\n            <DeleteTwoTone\n              style={{ cursor: \"pointer\" }}\n              onClick={() =>\n                designerDispatch({\n                  type: \"DELETE\",\n                  id: cellData.id,\n                })\n              }\n            />\n          </div>\n        ) : undefined}\n      </Cell>\n    </>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { AiOutlineMenu, AiOutlineMinusCircle } from \"react-icons/ai\";\nimport { Button, InputNumber } from \"antd\";\nimport { LaneData } from \"../../schema\";\n\ninterface DragItem {\n  index: number;\n  type: string;\n}\n\ninterface LaneConfigProps {\n  index: number;\n  data: LaneData;\n  move: (from: number, to: number) => void;\n  onRemove: () => void;\n  onResize: (span: string | number | undefined) => void;\n}\n\nexport default function LaneConfig({\n  index,\n  data,\n  move,\n  onRemove,\n  onResize,\n}: LaneConfigProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drag] = useDrag({\n    item: {\n      type: \"config\",\n      index: index,\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: \"config\",\n    hover: (item: DragItem, monitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      move(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  drag(drop(ref));\n  return (\n    <>\n      <div ref={ref}>\n        <AiOutlineMenu style={{ cursor: \"move\" }} />\n        <InputNumber\n          onChange={onResize}\n          value={data.span}\n          size={\"small\"}\n          style={{\n            width: \"160px\",\n            margin: \"0 4px\",\n          }}\n        />\n        <Button type={\"link\"} onClick={onRemove} style={{ padding: \"0\" }}>\n          <AiOutlineMinusCircle />\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport LaneConfig from \"./LaneConfig\";\nimport update from \"immutability-helper\";\nimport { Button, Form } from \"antd\";\nimport { CellData } from \"../../schema\";\nimport { DesignerContext } from \"../index\";\n\ninterface GridCellConfigProps {\n  data: CellData;\n}\n\nexport default function GridCellConfig({ data }: GridCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <Form labelCol={{ span: 6 }}>\n      <Form.Item label={\"列\"}>\n        <>\n          {data &&\n            data.lanes &&\n            data.lanes.map((lane, index) => (\n              <LaneConfig\n                key={\"lane-config-\" + index}\n                index={index}\n                data={lane}\n                onResize={(span) => {\n                  const finalSpan =\n                    typeof span === \"string\" || !span ? 0 : span;\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        [index]: {\n                          span: { $set: finalSpan },\n                        },\n                      }),\n                    },\n                  });\n                }}\n                onRemove={() => {\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        $splice: [[index, 1]],\n                      }),\n                    },\n                  });\n                }}\n                move={(from, to) => {\n                  const dragItem = data.lanes?.[from]!;\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      lanes: update(data.lanes, {\n                        $splice: [\n                          [from, 1],\n                          [to, 0, dragItem],\n                        ],\n                      }),\n                    },\n                  });\n                }}\n              />\n            ))}\n          <Button\n            type={\"link\"}\n            onClick={() => {\n              const copy = { ...data };\n              copy.lanes!.push({ cellDataList: [], span: 12 });\n              designerDispatch({\n                type: \"UPDATE\",\n                data: copy,\n              });\n            }}\n          >\n            添加列\n          </Button>\n        </>\n      </Form.Item>\n    </Form>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { CellData } from \"../schema\";\nimport { DesignerContext } from \"./index\";\nimport { Input, Switch, Form, AutoComplete, Typography } from \"antd\";\nimport update from \"immutability-helper\";\n\nconst { Text } = Typography;\n\ninterface DateCellConfigProps {\n  data: CellData;\n}\n\nexport default function DateCellConfig({ data }: DateCellConfigProps) {\n  const defaultValueOptions = [\n    {\n      label: (\n        <>\n          <Text>now: </Text>\n          <Text type={\"secondary\"}>当前时间</Text>\n        </>\n      ),\n      text: \"now\",\n      value: \"now\",\n    },\n  ];\n  const [currentDefaultValueOptions, setCurrentDefaultValueOptions] = useState(\n    defaultValueOptions\n  );\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={!!data.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={data.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"默认值\"}>\n          <AutoComplete\n            onSearch={(searchText) => {\n              setCurrentDefaultValueOptions(\n                defaultValueOptions.filter(\n                  (item) => item.text.search(new RegExp(searchText, \"i\")) > -1\n                )\n              );\n            }}\n          >\n            {currentDefaultValueOptions.map((option) => (\n              <AutoComplete.Option value={option.value} key={option.value}>\n                {option.label}\n              </AutoComplete.Option>\n            ))}\n          </AutoComplete>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { AiOutlineMenu, AiOutlineMinusCircle } from \"react-icons/ai\";\nimport { Button, Input } from \"antd\";\n\ninterface DragItem {\n  index: number;\n  type: string;\n}\n\ninterface OptionConfigProps {\n  index: number;\n  data: string;\n  move: (from: number, to: number) => void;\n  onRemove: () => void;\n  onChange: (data: string) => void;\n}\n\nexport default function OptionConfig({\n  index,\n  data,\n  move,\n  onRemove,\n  onChange,\n}: OptionConfigProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drag] = useDrag({\n    item: {\n      type: \"config\",\n      index: index,\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: \"config\",\n    hover: (item: DragItem, monitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      move(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  drag(drop(ref));\n  return (\n    <>\n      <div ref={ref}>\n        <AiOutlineMenu style={{ cursor: \"move\" }} />\n        <Input\n          onChange={(event) => {\n            onChange(event.target.value);\n          }}\n          value={data}\n          size={\"small\"}\n          style={{\n            width: \"120px\",\n            margin: \"0 4px\",\n          }}\n        />\n        <Button type={\"link\"} onClick={onRemove} style={{ padding: \"0\" }}>\n          <AiOutlineMinusCircle />\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { CellData } from \"../../schema\";\nimport { DesignerContext } from \"../index\";\nimport { Input, Switch, Form, Button } from \"antd\";\nimport update from \"immutability-helper\";\nimport OptionConfig from \"./OptionConfig\";\n\ninterface SelectCellConfigProps {\n  data: CellData;\n}\n\nexport default function SelectCellConfig({ data }: SelectCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={!!data.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={data.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"选项\"}>\n          <>\n            {data &&\n              data.options &&\n              data.options.map((option, index) => (\n                <OptionConfig\n                  key={\"option-config-\" + index}\n                  index={index}\n                  data={option.label}\n                  onChange={(label) => {\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          [index]: {\n                            label: { $set: label || \"\" },\n                          },\n                        }),\n                      },\n                    });\n                  }}\n                  onRemove={() => {\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          $splice: [[index, 1]],\n                        }),\n                      },\n                    });\n                  }}\n                  move={(from, to) => {\n                    const dragItem = data.options?.[from]!;\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          $splice: [\n                            [from, 1],\n                            [to, 0, dragItem],\n                          ],\n                        }),\n                      },\n                    });\n                  }}\n                />\n              ))}\n            <Button\n              type={\"link\"}\n              onClick={() => {\n                const copy = { ...data };\n                copy.options!.push({ label: \"新选项\", value: +new Date() });\n                designerDispatch({\n                  type: \"UPDATE\",\n                  data: copy,\n                });\n              }}\n            >\n              添加列\n            </Button>\n          </>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React from \"react\";\nimport { WidgetData } from \"../schema\";\nimport { useDrag } from \"react-dnd\";\nimport styled from \"styled-components\";\n\ninterface WidgetProps {\n  widget: WidgetData;\n}\n\nconst StyledLi = styled.li`\n  font-size: 14px;\n  box-sizing: border-box;\n  width: 125px;\n  display: inline-block;\n  cursor: move;\n  border: 1px solid #a3a3a3;\n  padding: 5px 10px;\n  margin: 2px;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-color: white;\n\n  > * {\n    margin-right: 4px;\n    vertical-align: middle;\n  }\n`;\n\nexport function Widget({ widget }: WidgetProps) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: widget.type },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  return (\n    <StyledLi\n      key={widget.name}\n      style={{ opacity: isDragging ? \"0.5\" : 1 }}\n      ref={drag}\n    >\n      {widget.icon}\n      <span>{widget.name}</span>\n    </StyledLi>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { Widget } from \"./Widget\";\nimport { WidgetData } from \"../schema\";\n\ninterface WidgetGroupProps {\n  name: string;\n  list: WidgetData[];\n}\n\nexport default function ({ name, list }: WidgetGroupProps) {\n  return (\n    <>\n      <Fragment key={name}>\n        <div>{name}</div>\n        <ul\n          style={{\n            width: \"100%\",\n            listStyle: \"none\",\n            padding: 0,\n          }}\n        >\n          {list.map((w: WidgetData) => {\n            return <Widget key={w.name} widget={w} />;\n          })}\n        </ul>\n      </Fragment>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { CellData } from \"../schema\";\nimport { DesignerContext } from \"./index\";\nimport { Input, Switch, Form, Button } from \"antd\";\nimport update from \"immutability-helper\";\nimport OptionConfig from \"./SelectCellConfig/OptionConfig\";\n\ninterface CheckboxCellConfigProps {\n  data: CellData;\n}\n\nexport default function CheckboxCellConfig({ data }: CheckboxCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={!!data.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={data.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"选项\"}>\n          <>\n            {data &&\n              data.options &&\n              data.options.map((option, index) => (\n                <OptionConfig\n                  key={\"option-config-\" + index}\n                  index={index}\n                  data={option.label}\n                  onChange={(label) => {\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          [index]: {\n                            label: { $set: label || \"\" },\n                          },\n                        }),\n                      },\n                    });\n                  }}\n                  onRemove={() => {\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          $splice: [[index, 1]],\n                        }),\n                      },\n                    });\n                  }}\n                  move={(from, to) => {\n                    const dragItem = data.options?.[from]!;\n                    designerDispatch({\n                      type: \"UPDATE\",\n                      data: {\n                        ...data,\n                        options: update(data.options, {\n                          $splice: [\n                            [from, 1],\n                            [to, 0, dragItem],\n                          ],\n                        }),\n                      },\n                    });\n                  }}\n                />\n              ))}\n            <Button\n              type={\"link\"}\n              onClick={() => {\n                const copy = { ...data };\n                copy.options!.push({ label: \"新选项\", value: +new Date() });\n                designerDispatch({\n                  type: \"UPDATE\",\n                  data: copy,\n                });\n              }}\n            >\n              添加列\n            </Button>\n          </>\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { CellData } from \"../schema\";\nimport { DesignerContext } from \"./index\";\nimport { Input, Form } from \"antd\";\nimport update from \"immutability-helper\";\n\ninterface LabelCellConfigProps {\n  data: CellData;\n}\n\nexport default function LabelCellConfig({ data }: LabelCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={data.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(data, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import styled from \"styled-components\";\nimport { Layout } from \"antd\";\n\nconst { Header, Sider, Content } = Layout;\n\nexport const WhiteLayout = styled(Layout)`\n  background-color: white;\n`;\n\nexport const WhiteHeader = styled(Header)`\n  background-color: white;\n`;\n\nexport const WhiteSider = styled(Sider)`\n  background-color: white;\n`;\n\nexport const WhiteContent = styled(Content)`\n  background-color: white;\n`;\n","import React, { useContext } from \"react\";\nimport { CellData } from \"../schema\";\nimport { DesignerContext } from \"./index\";\nimport { Input, Switch, Form } from \"antd\";\nimport update from \"immutability-helper\";\n\ninterface SelectWrapperCellConfigProps {\n  data: CellData;\n}\n\nexport default function DefaultCellConfig({\n  data,\n}: SelectWrapperCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  const innerData = { ...data };\n  innerData.label = innerData.label || \"自定义控件\";\n  return (\n    <>\n      <Form labelCol={{ span: 6 }}>\n        <Form.Item label={\"标题\"}>\n          <Input\n            value={innerData.label}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(innerData, {\n                  label: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"必填\"}>\n          <Switch\n            checked={!!innerData.required}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(innerData, {\n                  required: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"只读\"}>\n          <Switch\n            checked={innerData.disabled}\n            onChange={(checked) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(innerData, {\n                  disabled: { $set: checked },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n        <Form.Item label={\"默认值\"}>\n          <Input\n            value={innerData.defaultValue}\n            onChange={(event) => {\n              designerDispatch({\n                type: \"UPDATE\",\n                data: update(innerData, {\n                  defaultValue: { $set: event.target.value },\n                }),\n              });\n            }}\n          />\n        </Form.Item>\n      </Form>\n    </>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { useDrag, useDrop, XYCoord } from \"react-dnd\";\nimport { AiOutlineMenu, AiOutlineMinusCircle } from \"react-icons/ai\";\nimport { Button, Input } from \"antd\";\n\ninterface DragItem {\n  index: number;\n  type: string;\n}\n\ninterface TabConfigProps {\n  index: number;\n  name: string;\n  move: (from: number, to: number) => void;\n  onRemove: () => void;\n  onRename: (tab: string) => void;\n}\n\nexport default function TabConfig({\n  index,\n  name,\n  move,\n  onRemove,\n  onRename,\n}: TabConfigProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drag] = useDrag({\n    item: {\n      type: \"config\",\n      index: index,\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: \"config\",\n    hover: (item: DragItem, monitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current!.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      move(dragIndex, hoverIndex);\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  drag(drop(ref));\n  return (\n    <>\n      <div ref={ref}>\n        <AiOutlineMenu style={{ cursor: \"move\" }} />\n        <Input\n          onChange={(event) => onRename(event.target.value)}\n          value={name}\n          size={\"small\"}\n          style={{\n            width: \"160px\",\n            margin: \"0 4px\",\n          }}\n        />\n        <Button type={\"link\"} onClick={onRemove} style={{ padding: \"0\" }}>\n          <AiOutlineMinusCircle />\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport TabConfig from \"./TabConfig\";\nimport update from \"immutability-helper\";\nimport { Button, Form } from \"antd\";\nimport { CellData } from \"../../schema\";\nimport { DesignerContext } from \"../index\";\n\ninterface TabCellConfigProps {\n  data: CellData;\n}\n\nexport default function TabCellConfig({ data }: TabCellConfigProps) {\n  const designerDispatch = useContext(DesignerContext);\n  return (\n    <Form labelCol={{ span: 6 }}>\n      <Form.Item label={\"选项卡\"}>\n        <>\n          {data &&\n            data.tabs &&\n            data.tabs.map((tab, index) => (\n              <TabConfig\n                key={\"tab-config-\" + index}\n                index={index}\n                name={tab}\n                onRename={(name) => {\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      tabs: update(data.tabs, {\n                        [index]: { $set: name },\n                      }),\n                    },\n                  });\n                }}\n                onRemove={() => {\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      tabs: update(data.tabs, {\n                        $splice: [[index, 1]],\n                      }),\n                      lanes: update(data.lanes, {\n                        $splice: [[index, 1]],\n                      }),\n                    },\n                  });\n                }}\n                move={(from, to) => {\n                  const dragItem = data.tabs![from]!;\n                  designerDispatch({\n                    type: \"UPDATE\",\n                    data: {\n                      ...data,\n                      tabs: update(data.tabs, {\n                        $splice: [\n                          [from, 1],\n                          [to, 0, dragItem],\n                        ],\n                      }),\n                      lanes: update(data.lanes, {\n                        $splice: [\n                          [from, 1],\n                          [to, 0, data.lanes![from]],\n                        ],\n                      }),\n                    },\n                  });\n                }}\n              />\n            ))}\n          <Button\n            type={\"link\"}\n            onClick={() => {\n              const copy = { ...data };\n              copy.lanes!.push({ cellDataList: [], span: 0 });\n              copy.tabs?.push(\"新选项卡\");\n              designerDispatch({\n                type: \"UPDATE\",\n                data: copy,\n              });\n            }}\n          >\n            添加列\n          </Button>\n        </>\n      </Form.Item>\n    </Form>\n  );\n}\n","import React, {\n  CSSProperties,\n  Dispatch,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport { Button, Modal, Space } from \"antd\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { clone, cloneAndForEach, getActive, reducer } from \"./util\";\nimport { CellData } from \"../schema\";\nimport { WidgetGroups } from \"../constants/WidgetGroups\";\nimport { DnDCell } from \"./DnDCell\";\nimport GridCellConfig from \"./GridCellConfig\";\nimport styled from \"styled-components\";\nimport DateCellConfig from \"./DateCellConfig\";\nimport SelectCellConfig from \"./SelectCellConfig\";\nimport WidgetGroup from \"./WidgetGroup\";\nimport CheckboxCellConfig from \"./CheckboxCellConfig\";\nimport LabelCellConfig from \"./LabelCellConfig\";\nimport { CustomCell } from \"./Cell\";\nimport { AiOutlineEdit } from \"react-icons/all\";\nimport { WhiteContent, WhiteHeader, WhiteLayout, WhiteSider } from \"../Layout\";\nimport DefaultCellConfig from \"./DefaultCellConfig\";\nimport { CellDataType, ReducerActionProps } from \"../type\";\nimport useInteractions from \"../hooks/interactions\";\nimport Form from \"../index\";\nimport { InteractContext } from \"../util\";\nimport TabCellConfig from \"./TabCellConfig\";\nimport \"./index.css\";\n\nconst rootCellData: CellData = {\n  type: \"grid\",\n  id: \"11270307\",\n  lanes: [{ span: 24, cellDataList: [] }],\n  active: false,\n};\n\nexport const DesignerContext = React.createContext<\n  Dispatch<ReducerActionProps>\n>({} as Dispatch<ReducerActionProps>);\nconst LeftSider = styled(WhiteSider).attrs({\n  width: 280,\n})`\n  padding: 10px;\n  border-right: 1px solid #d3d3d3;\n`;\nconst FullHeightBorderedLayout = styled(WhiteLayout)`\n  border: 1px solid #d3d3d3;\n  height: calc(100% - 1px);\n`;\nconst ToolBar = styled(WhiteHeader)`\n  padding: 0 10px;\n  text-align: right;\n  border-bottom: 1px solid #a3a3a3;\n`;\n\ninterface DesignerProps {\n  customCells?: CustomCell[];\n  availableCustomCells?: CustomCell[];\n  toolbar?: boolean;\n  style?: CSSProperties;\n  defaultCellData?: CellData;\n  builtinCellDataTypes?: CellDataType[];\n  onChange?: (root: CellData) => void;\n}\n\nexport const Designer = forwardRef(\n  (\n    {\n      customCells,\n      availableCustomCells,\n      toolbar = true,\n      defaultCellData,\n      builtinCellDataTypes,\n      onChange,\n      style,\n    }: DesignerProps,\n    ref\n  ) => {\n    const [data, designerDispatch] = useReducer(\n      reducer,\n      defaultCellData || rootCellData\n    );\n    const [previewDialogVisible, setPreviewDialogVisible] = useState(false);\n    const [previewData, setPreviewData] = useState<CellData | null>(null);\n    const previewRef = useRef<any>();\n    const delFunction = useCallback((event) => {\n      if (event.keyCode === 46 || (event.ctrlKey && event.keyCode === 8)) {\n        designerDispatch({ type: \"DELETE_ACTIVE\" });\n      }\n    }, []);\n    const finalAvailableCells = useMemo(() => {\n      return availableCustomCells || customCells;\n    }, [availableCustomCells, customCells]);\n    useEffect(() => {\n      document.addEventListener(\"keyup\", delFunction, false);\n      return () => document.removeEventListener(\"keyup\", delFunction, false);\n    }, [delFunction]);\n    useEffect(() => onChange?.(data), [data, onChange]);\n    useImperativeHandle(ref, () => ({\n      preview() {\n        setPreviewDialogVisible(true);\n        setPreviewData(clone(data));\n      },\n      reset() {\n        designerDispatch({\n          type: \"INIT\",\n          data: rootCellData,\n        });\n      },\n      load(data: CellData) {\n        designerDispatch({\n          type: \"INIT\",\n          data: data,\n        });\n      },\n      get() {\n        return cloneAndForEach(data, (item) => (item.value = undefined));\n      },\n    }));\n    const active = getActive(data);\n    const interactions = useInteractions(designerDispatch, data);\n    const widgetGroups = useMemo(() => {\n      if (!builtinCellDataTypes) {\n        return WidgetGroups;\n      }\n      return WidgetGroups.map((group) => ({\n        name: group.name,\n        widgets: group.widgets.filter(\n          (widget) =>\n            builtinCellDataTypes.indexOf(widget.type as CellDataType) > -1\n        ),\n      })).filter((group) => group.widgets.length > 0);\n    }, [builtinCellDataTypes]);\n\n    return (\n      <>\n        <DesignerContext.Provider value={designerDispatch}>\n          <InteractContext.Provider value={interactions}>\n            <DndProvider backend={HTML5Backend}>\n              <FullHeightBorderedLayout style={style}>\n                <LeftSider>\n                  {widgetGroups.map((g) => (\n                    <WidgetGroup key={g.name} name={g.name} list={g.widgets} />\n                  ))}\n                  {finalAvailableCells && (\n                    <WidgetGroup\n                      key={\"自定义\"}\n                      name={\"自定义\"}\n                      list={[\n                        ...finalAvailableCells.map((cell) => ({\n                          type: cell.type,\n                          name: cell.name || \"自定义组件\",\n                          icon: cell.icon || <AiOutlineEdit />,\n                        })),\n                      ]}\n                    />\n                  )}\n                </LeftSider>\n                <WhiteContent>\n                  <WhiteLayout style={{ height: \"100%\" }}>\n                    {toolbar && (\n                      <ToolBar>\n                        <Space>\n                          <Button\n                            onClick={() => {\n                              designerDispatch({\n                                type: \"INIT\",\n                                data: rootCellData,\n                              });\n                            }}\n                          >\n                            Reset\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              setPreviewDialogVisible(true);\n                              setPreviewData(clone(data));\n                            }}\n                          >\n                            Preview\n                          </Button>\n                          <Button onClick={() => alert(JSON.stringify(data))}>\n                            Save\n                          </Button>\n                        </Space>\n                      </ToolBar>\n                    )}\n\n                    <WhiteContent style={{ height: \"100%\", padding: 10 }}>\n                      <DnDCell\n                        className={\"root\"}\n                        cellData={data}\n                        index={0}\n                        customCells={customCells}\n                      />\n                    </WhiteContent>\n                  </WhiteLayout>\n                </WhiteContent>\n                <WhiteSider\n                  width={280}\n                  style={{ padding: 10, borderLeft: \"1px solid #d3d3d3\" }}\n                >\n                  {active ? (\n                    active.type === \"grid\" ? (\n                      <GridCellConfig data={active} />\n                    ) : active.type === \"tab\" ? (\n                      <TabCellConfig data={active} />\n                    ) : active.type === \"datetime\" ? (\n                      <DateCellConfig data={active} />\n                    ) : active.type === \"select\" ? (\n                      <SelectCellConfig data={active} />\n                    ) : active.type === \"checkbox\" ? (\n                      <CheckboxCellConfig data={active} />\n                    ) : active.type === \"label\" ? (\n                      <LabelCellConfig data={active} />\n                    ) : (\n                      (customCells &&\n                        customCells.some((item) => item.type === active.type) &&\n                        customCells.filter(\n                          (item) => item.type === active.type\n                        )[0].config &&\n                        React.createElement(\n                          customCells.filter(\n                            (item) => item.type === active.type\n                          )[0].config!,\n                          {\n                            data: active,\n                            onChange: function (data: CellData) {\n                              designerDispatch({\n                                type: \"UPDATE\",\n                                data: data,\n                              });\n                            },\n                          }\n                        )) || <DefaultCellConfig data={active} />\n                    )\n                  ) : (\n                    <></>\n                  )}\n                </WhiteSider>\n              </FullHeightBorderedLayout>\n            </DndProvider>\n          </InteractContext.Provider>\n        </DesignerContext.Provider>\n        <Modal\n          width={1000}\n          title={\"Preview\"}\n          visible={previewDialogVisible}\n          onCancel={() => setPreviewDialogVisible(false)}\n          footer={[\n            <Button\n              onClick={() => {\n                const result = previewRef.current!.getData();\n                alert(JSON.stringify(result));\n              }}\n            >\n              Save\n            </Button>,\n            <Button onClick={() => previewRef.current.validate()}>\n              Validate\n            </Button>,\n          ]}\n        >\n          {previewData && (\n            <Form\n              customCells={customCells}\n              ref={previewRef}\n              data={cloneAndForEach(previewData, (data) => {\n                data.value = data.defaultValue || data.value;\n              })}\n              key={previewData.id}\n            />\n          )}\n        </Modal>\n      </>\n    );\n  }\n);\n","import React from 'react';\nimport './App.css';\nimport {Designer} from './components/Form/Designer';\n\nfunction App() {\n  return (\n      <Designer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}